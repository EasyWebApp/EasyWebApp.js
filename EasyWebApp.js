//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('EasyWebApp',  ['jquery', 'jQueryKit'],  factory);
    else if (typeof module === 'object')
        module.exports = factory(require('jquery'), require('jQueryKit'));
    else
        this.EasyWebApp = factory(this['jquery'], this['jQueryKit']);

})(function (jquery, jQueryKit) {


var base_Observer = (function ($) {

    function Observer($_View, all_event) {

        this.$_View = ($_View instanceof $)  ?  $_View  :  $( $_View );

        this.setPrivate('handle',  { });

        return  this.init( all_event );
    }

    function basicMethod(iClass) {

        var iType = Observer.prototype.toString.call({constructor: iClass});

        $.extend(iClass.prototype, {
            init:          function (all_event) {

                var _This_ = this.$_View.data( iType );

                return  ((_This_ != null)  &&  (_This_ !== this))  ?
                    _This_  :
                    $.data(this.$_View[0],  iType,  this.setHandle( all_event ));
            },
            setHandle:     function (all_event) {

                var _This_ = this;

                $.each(this.$_View[0].attributes,  function () {

                    var iName = (this.nodeName.match(/^on(\w+)/i) || '')[1];

                    if (
                        (! iName)  ||
                        !(all_event  ||  (iName in iClass.Bind_Event))  ||
                        (this.nodeName in this.ownerElement)
                    )
                        return;

                    Object.defineProperty(this.ownerElement,  'on' + iName,  {
                        set:    function (iHandler) {

                            _This_.off( iName );

                            if (typeof iHandler === 'function')
                                _This_.on(iName, iHandler);
                        },
                        get:    function () {

                            return Observer.prototype.valueOf.call(
                                _This_,  iName,  'handler'
                            )[0];
                        }
                    });
                });

                return this;
            },
            destructor:    function () {

                this.$_View.removeData( iType );

                return  this.valueOf.apply(this, arguments);
            }
        });

        return  $.extend(iClass, {
            Bind_Event:       { },
            registerEvent:    function () {

                $.extend(iClass.Bind_Event,  $.makeSet.apply($, arguments));

                return this;
            },
            signSelector:     function () {

                var _This_ = this;

                $.expr[':'][ this.name.toLowerCase() ] = function () {
                    return (
                        ($.data(arguments[0], iType) || '')  instanceof  _This_
                    );
                };

                return this;
            },
            instanceOf:       function ($_DOM, Check_Parent) {

                var _Instance_,  element = $( $_DOM )[0];

                while ( element ) {

                    _Instance_ = $.data(element, iType);

                    if (_Instance_ instanceof this)  return _Instance_;

                    element = (Check_Parent !== false)  &&  element.parentNode;
                }
            }
        }).signSelector();
    }

    return  basicMethod($.Class.extend(Observer, {
        extend:      function (iConstructor, iStatic, iPrototype) {

            return basicMethod($.Class.extend.call(
                this,  iConstructor,  iStatic,  iPrototype
            ));
        },
        getEvent:    function (iEvent) {

            return $.extend(
                { },
                (typeof iEvent == 'string')  ?  {type: iEvent}  :  iEvent,
                arguments[1]
            );
        },
        match:       function (iEvent, iHandle) {
            var iRegExp;

            for (var iKey in iHandle) {

                iRegExp = iEvent[iKey] instanceof RegExp;

                switch ($.Type( iHandle[iKey] )) {
                    case 'RegExp':
                        if ( iRegExp ) {
                            if (iEvent[iKey].toString() != iHandle[iKey].toString())
                                return;
                            break;
                        }
                    case 'String':    {
                        if (! (iEvent[iKey] || '')[iRegExp ? 'test' : 'match'](
                            iHandle[iKey]
                        ))
                            return;
                        break;
                    }
                    case 'Function':
                        if (typeof iEvent[iKey] != 'function')  break;
                    default:
                        if (iEvent[iKey] !== iHandle[iKey])  return;
                }
            }

            return iHandle;
        }
    }, {
        toString:    function () {

            return  '[object ' + this.constructor.name + ']';
        },
        valueOf:     function (iEvent, iKey) {

            if (! iEvent)  return  this.__handle__;

            return  (! iKey)  ?  this.__handle__[iEvent]  :
                $.map(this.__handle__[iEvent],  function () {

                    return  arguments[0][ iKey ];
                });
        },
        on:          function (iEvent, iCallback) {

            iEvent = Observer.getEvent(iEvent,  {handler: iCallback});

            var iHandle = this.__handle__[iEvent.type] =
                    this.__handle__[iEvent.type]  ||  [ ];

            for (var i = 0;  iHandle[i];  i++)
                if ($.isEqual(iHandle[i], iEvent))  return this;

            iHandle.push( iEvent );

            return this;
        },
        emit:        function (iEvent, iData) {

            iEvent = Observer.getEvent( iEvent );

            return  (this.__handle__[iEvent.type] || [ ]).reduce(
                (function (_Data_, iHandle) {

                    if (! Observer.match(iEvent, iHandle))  return _Data_;

                    var iResult = iHandle.handler.call(this, iEvent, _Data_);

                    return  (iResult != null)  ?  iResult  :  _Data_;

                }).bind( this ),
                iData
            );
        },
        off:         function (iEvent, iCallback) {

            iEvent = Observer.getEvent(iEvent,  {handler: iCallback});

            this.__handle__[iEvent.type] = $.map(
                this.__handle__[iEvent.type],  function (iHandle) {

                    return  Observer.match(iEvent, iHandle)  ?  null  :  iHandle;
                }
            );

            return this;
        },
        one:         function () {

            var _This_ = this,  iArgs = $.makeArray( arguments );

            var iCallback = iArgs.slice(-1)[0];

            iCallback = (typeof iCallback == 'function')  &&  iArgs.pop();

            var iPromise = new Promise(function (iResolve) {

                    _This_.on.apply(_This_,  iArgs.concat(function once() {

                        _This_.off.apply(_This_,  iArgs.concat( once ));

                        if ( iCallback )  return  iCallback.apply(this, arguments);

                        iResolve( arguments[1] );
                    }));
                });

            return  iCallback ? this : iPromise;
        }
    }));
})(jquery);


var view_RenderNode = (function ($) {

    function RenderNode(iNode) {

        $.extend(this, {
            ownerNode:       iNode,
            name:            iNode.nodeName,
            raw:             iNode.nodeValue,
            ownerElement:    iNode.parentNode || iNode.ownerElement,
            type:            0,
            value:           null
        }).scan();
    }

    RenderNode.expression = /\$\{([\s\S]+?)\}/g;

    RenderNode.reference = /(view|scope)\.(\w+)/g;

    RenderNode.Template_Type = $.makeSet(2, 3, 8);

    function Eval(view, scope, expression) {  'use strict';
        try {
            var iValue = eval( expression );

            return  (iValue != null)  ?  iValue  :  '';

        } catch (iError) {

            console.error( iError );

            return '';
        }
    }

    $.extend(RenderNode.prototype, {
        splice:      Array.prototype.splice,
        indexOf:     Array.prototype.indexOf,
        push:        Array.prototype.push,
        scan:        function () {

            var _This_ = this,  node = this.ownerNode;

            this.splice(0, Infinity);    this.type = 0;

            node.nodeValue = this.raw.replace(
                RenderNode.expression,  function (_, expression) {

                    if (/\w+\s*\([\s\S]*?\)/.test( expression ))
                        _This_.type = _This_.type | 2;

                    expression.replace(
                        RenderNode.reference,  function (_, scope, key) {

                            _This_.type = _This_.type | (
                                (scope === 'view')  ?  1  :  4
                            );

                            if (_This_.indexOf( key )  <  0)
                                _This_.push( key );
                        }
                    );

                    return '';
                }
            );

            if ( this[0] )  switch ( node.nodeType ) {
                case 8:    {
                    this.ownerElement.replaceChild(
                        node = document.createTextNode( node.nodeValue ),
                        this.ownerNode
                    );
                    this.ownerNode = node,  this.name = node.nodeName;

                    break;
                }
                case 2:
                    if (
                        (! node.nodeValue)  &&  (
                            ($.propFix[node.nodeName] || node.nodeName)  in
                            this.ownerElement
                        )
                    )
                        this.ownerElement.removeAttribute( node.nodeName );
            }

            return this;
        },
        eval:        function (context, scope) {

            var refer,  _This_ = this.ownerElement;

            var text = this.raw.replace(
                    RenderNode.expression,
                    function (template, expression, _, raw) {

                        refer = Eval.call(_This_, context, scope, expression);

                        return  (template == raw)  ?  raw  :  refer;
                    }
                );

            return  (this.raw == text)  ?  refer  :  text;
        },
        render:      function (iContext, iScope) {

            var iValue = this.eval(iContext, iScope),
                iNode = this.ownerNode,
                iParent = this.ownerElement;

            if (iValue === this.value)  return;

            this.value = iValue;

            switch ( iNode.nodeType ) {
                case 3:    {
                    if (! (iNode.previousSibling || iNode.nextSibling))
                        return  iParent.innerHTML = iValue;

                    break;
                }
                case 2:    if (
                    (this.name != 'style')  &&  (this.name in iParent)
                ) {
                    iParent[ this.name ] = (iValue instanceof Function)  ?
                        iValue.bind( iContext )  :  iValue;

                    return;

                } else if (! iNode.ownerElement) {
                    if ( iValue )
                        iParent.setAttribute(this.name, iValue);

                    return;
                }
            }

            iNode.nodeValue = iValue;
        },
        toString:    function () {

            return  this.value + '';
        }
    });

    return RenderNode;

})(jquery);


var InnerLink = (function ($, Observer) {

    function InnerLink($_View) {

        var _This_ = Observer.call(this, $_View);

        return  ((_This_ !== this)  ?  _This_  :  this).setProp();
    }

    return  Observer.extend(InnerLink, {
        parsePath:    function (iPath) {

            var iNew;  iPath = iPath.replace(/^\.\//, '').replace(/\/\.\//g, '/');

            do {
                iPath = iNew || iPath;

                iNew = iPath.replace(/[^\.\/]+\/\.\.\//g, '');

            } while (iNew  &&  (iNew !== iPath));

            return iNew;
        },
        HTML_Link:    'a[href], area[href], form[action]',
        Self_Link:    '[data-href]:not(a, form)'
    }, {
        setProp:     function () {

            var link = this.$_View[0];

            this.method = (
                link.getAttribute('method') || link.dataset.method || 'Get'
            ).toUpperCase();

            this.contentType =
                link.getAttribute('type') || link.getAttribute('enctype') ||
                'application/x-www-form-urlencoded';

            this.charset = (
                link.getAttribute('charset') || link.acceptCharset ||
                document.charset
            ).split(/\s+/);

            this.setURI().title = link.title || document.title;

            if (! /^(a|area|form)$/i.test( link.tagName ))
                this.target = 'view';
            else if ( this.href )
                this.target = 'page';
            else
                this.target = 'data';

            return this;
        },
        setURI:      function () {

            var link = this.$_View[0];

            this.href = link.dataset.href ||
                link.getAttribute(link.href ? 'href' : 'action');

            this.src = this.href.split(/\?data=|&data=/);

            this.href = this.src[0];

            this.src = this.src[1];

            this.data = $.paramJSON( this.href );

            this.href = InnerLink.parsePath( this.href.split('?')[0] );

            return this;
        },
        toString:    function () {

            var iData = [$.param( this.data )];

            if (! iData[0])  iData.length = 0;

            if ( this.src )  iData.push('data=' + this.src);

            iData = iData.join('&');

            return  (this.href || '')  +  (iData  &&  ('?' + iData));
        },
        loadData:    function () {

            var Get_URL, header;

            var iOption = {
                    method:         this.method,
                    url:            this.src,
                    beforeSend:     arguments[0],
                    contentType:
                        this.contentType  +  '; charset='  +  this.charset[0],
                    dataType:
                        (this.src.match(/\?/g) || '')[1]  ?  'jsonp'  :  'json',
                    complete:       function (XHR) {

                        if (this.method === 'GET')  Get_URL = this.url;

                        header = $.parseHeader( XHR.getAllResponseHeaders() );
                    }
                };

            if ( this.$_View[0].tagName.match(/^(a|area)$/i) ) {

                iOption.data = $.extend({ }, this.$_View[0].dataset);

                delete iOption.data.method;
                delete iOption.data.autofocus;

            } else if (! this.$_View.find('input[type="file"]')[0]) {

                iOption.data = $.paramJSON('?' + this.$_View.serialize());

            } else if (iOption.type != 'GET') {

                iOption.data = new self.FormData( this.$_View[0] );

                iOption.contentType = iOption.processData = false;
            }

            if ( this.contentType.match(/^application\/json/) ) {

                iOption.data = JSON.stringify( iOption.data );

                iOption.processData = false;
            }

            return  Promise.resolve( $.ajax( iOption ) ).then(
                function (data) {

                    data = {head: header,  body: data};

                    return  Get_URL  ?  $.storage(Get_URL, data)  :  data;
                },
                function () {

                    if ( Get_URL )  return  $.storage( Get_URL );
                }
            );
        },
        load:        function (onRequest) {

            return Promise.all([
                this.href  &&  $.ajax({
                    type:          'GET',
                    url:           this.href,
                    beforeSend:    onRequest
                }),
                this.src  &&  this.loadData( onRequest )
            ]);
        },
        valueOf:     function () {

            var _This_ = { };

            for (var iKey in this)
                if (this.hasOwnProperty( iKey ))  _This_[iKey] = this[iKey];

            delete _This_.$_View;

            _This_.target = this.$_View[0];

            return _This_;
        }
    }).registerEvent('request', 'data');

})(jquery, base_Observer);


var base_DataScope = (function ($) {

    function DataScope(parent) {

        return  (parent instanceof DataScope)  ?  Object.create( parent )  :  this;
    }

    $.extend(DataScope.prototype = [ ],  {
        constructor:    DataScope,
        commit:         function (data, filter) {

            data = data.valueOf();

            var diff = { };

            for (var key in data)
                if ((! this.hasOwnProperty( key ))  ||  (this[key] !== data[key]))
                    this[ key ] = diff[ key ] = data[ key ];

            return diff;
        },
        valueOf:        function () {

            if ( this.hasOwnProperty('length') )
                return  Array.from(this,  function (data) {

                    return data.valueOf();
                });

            var data = { };

            for (var key in this)
                if ( this.hasOwnProperty( key ) )
                    data[ key ] = this[ key ].valueOf();

            return data;
        }
    });

    return DataScope;

})(jquery);


var view_View = (function ($, Observer, DataScope, RenderNode) {

    function View($_View, scope) {

        var _This_ = Observer.call(
                $.Class.call(this, View, ['render']),  $_View,  true
            );

        return  (_This_ !== this)  ?
            _This_ :
            this.setPrivate({
                id:          '',
                name:        this.$_View[0].name || this.$_View[0].dataset.name,
                data:        new DataScope( scope ),
                parse:       0,
                child:       [ ],
                observer:    null
            }).attach();
    }

    var Sub_Class = [ ];

    return  Observer.extend(View, {
        getSub:    function (iDOM) {

            var is_View = iDOM.getAttribute('is');

            for (var i = Sub_Class.length - 1;  Sub_Class[i];  i--)
                if (
                    is_View ?
                        (is_View === Sub_Class[i].name)  :
                        Sub_Class[i].is( iDOM )
                )
                    return  new Sub_Class[i](
                        iDOM,
                        (this.instanceOf( iDOM.parentNode )  ||  '').__data__
                    );
        },
        extend:    function (constructor, static, prototype) {

            Sub_Class.push( constructor );

            static = static  ||  { };

            static.is = static.is || $.noop;

            return $.Class.extend.call(
                this,  constructor,  static,  prototype
            ).signSelector();
        }
    }, {
        attrWatch:     function () {
            var _This_ = this;

            this.__observer__ = new self.MutationObserver(function () {

                var iData = { };

                $.each(arguments[0],  function () {

                    var iNew = this.target.getAttribute( this.attributeName );

                    if (
                        (iNew != this.oldValue)  &&
                        (! (this.oldValue || '').match( RenderNode.expression ))
                    )
                        iData[$.camelCase( this.attributeName.slice(5) )] = iNew;
                });

                if (_This_.__parse__  &&  (! $.isEmptyObject( iData )))
                    _This_.render( iData ).emit({
                        type:      'update',
                        target:    _This_.$_View[0]
                    }, iData);
            });

            this.__observer__.observe(this.$_View[0], {
                attributes:           true,
                attributeOldValue:    true,
                attributeFilter:      $.map(
                    Object.keys( this.$_View[0].dataset ),
                    function () {
                        return  'data-'  +  $.hyphenCase( arguments[0] );
                    }
                )
            });
        },
        attach:        function () {

            if (! this.$_View[0].id)
                this.$_View[0].id = this.__id__ || $.uuid('View');

            this.__id__ = this.$_View[0].id;

            this.$_View.data('[object View]', this);

            if ( this.$_View[0].dataset.href )  this.attrWatch();

            this.emit({
                type:      'attach',
                target:    this.$_View.append( this.$_Content )[0]
            });

            return this;
        },
        detach:        function () {

            if ( this.$_View[0].id.match(/^View_\w+/) )  this.$_View[0].id = '';

            this.$_View.data('[object View]', null);

            if (this.__observer__) {
                this.__observer__.disconnect();

                delete this.__observer__;
            }

            this.$_Content = this.$_View.children().detach();

            return this;
        },
        scan:          function (iParser) {

            var Sub_View = [ ];

            var iSearcher = this.$_View.treeWalker(1,  (function (iDOM) {

                    var iView;

                    if (this.$_View[0] !== iDOM) {

                        if ( iDOM.dataset.href ) {

                            iView = View.getSub( iDOM );

                            if (this.__child__.indexOf( iView )  <  0)
                                this.__child__.push( iView );

                            return null;

                        } else if (
                            iDOM.dataset.name  ||
                            (iView = View.instanceOf(iDOM, false))
                        ) {
                            iView = iView  ||  View.getSub( iDOM );

                            Sub_View.push(
                                (iView.parse  &&  (! iView.__parse__))  ?
                                    iView.parse()  :  iView
                            );

                            return null;

                        } else if (
                            (iDOM.parentNode == document.head)  &&
                            (iDOM.tagName.toLowerCase() != 'title')
                        )
                            return null;
                    }

                    return  iParser.call(this, iDOM);

                }).bind( this ));

            while (! iSearcher.next().done)  ;

            for (var i = 0;  this.__child__[i];  i++)
                iParser.call(this,  this.__child__[i].$_View[0]);

            for (var i = 0;  Sub_View[i];  i++)
                iParser.call(this, Sub_View[i]);

            this.__parse__ = $.now();

            return this;
        },
        watch:         function (key, get_set) {

            if (! (key in Object.getPrototypeOf( this )))
                this.setPublic(key, get_set, {
                    get:    function () {

                        return  this.__data__[key];
                    },
                    set:    this.render.bind(this, key)
                });

            return this;
        },
        valueOf:       function () {

            return  this.__data__.valueOf();
        },
        childOf:       function ($_Filter) {

            var children = this.__child__ || this;

            return  $_Filter ?
                $.map(children,  function (VM) {

                    return  VM.$_View.is( $_Filter )  ?  VM  :  null;
                }) :
                Array.from( children );
        }
    }).registerEvent('ready', 'update');

})(jquery, base_Observer, base_DataScope, view_RenderNode);


var view_DOMkit = (function ($, RenderNode, InnerLink) {

    var Invalid_Style = $.makeSet('inherit', 'initial'),
        URL_DOM = $.extend(
            $.makeSet(0,  ['script', 'img', 'iframe', 'audio', 'video']),
            $.makeSet('href',  ['link', 'a', 'area']),
            {form: 'action',  '[data-href]': 'data-href'}
        ),
        URL_Prefix = $.makeSet('?', '#');


    return {
        cssRule:      function cssRule(sheet) {

            var rule = { };

            $.each(sheet.cssRules,  function () {

                if ( this.cssRules )
                    return (
                        rule[ this.cssText.split( /\s*\{/ )[0] ] = cssRule( this )
                    );

                var _rule_ = rule[this.selectorText || this.keyText] = { };

                for (var i = 0, value, priority;  this.style[i];  i++) {

                    value = this.style.getPropertyValue( this.style[i] );

                    if (priority = this.style.getPropertyPriority( this.style[i] ))
                        value += ' !' + priority;

                    if (! (value in Invalid_Style))
                        _rule_[ this.style[i] ] = value;
                }
            });

            return rule;
        },
        fixStyle:     function ($_Root, iDOM) {

            if ( iDOM.classList.contains('iQuery_CSS-Rule') )  return iDOM;

            var rule = this.cssRule( iDOM.sheet );    iDOM = [ ];

            $.each(rule,  function (selector) {

                var At_Rule = selector.match( /^@\S*?(\w+)\s*([\s\S]+)/ );

                if (! At_Rule)  return;

                switch ( At_Rule[1] ) {
                    case 'media':
                        $_Root.cssRule(this,  function () {

                            iDOM[iDOM.push( arguments[0].ownerNode ) - 1].media =
                                At_Rule[2];
                        });
                        break;
                    case 'keyframes':
                        iDOM.push( $.cssRule(selector,  this) );
                        break;
                    case 'supports':
                        if (
                            (CSS.supports instanceof Function)  &&
                            CSS.supports( At_Rule[2] )
                        )
                            $.extend(true,  rule,  this);
                }

                delete  rule[ selector ];
            });

            $_Root.cssRule(rule,  function () {

                iDOM.unshift( arguments[0].ownerNode );
            });

            return iDOM;
        },
        fixScript:    function (iDOM) {
            var iAttr = { };

            $.each(iDOM.attributes,  function () {

                iAttr[ this.nodeName ] = this.nodeValue;
            });

            iDOM = $('<script />', iAttr).prop('text', iDOM.text)[0];

            return iDOM;
        },
        fixURL:       function (iDOM, iKey, iBase) {

            var iURL = iDOM.getAttribute( iKey )  ||  '';

            var expression = iURL.match( RenderNode.expression );

            if (
                !(iURL[0] in URL_Prefix)  &&
                (iURL  !==  (expression || [ ]).join(''))
            ) {
                var root = $.filePath() + '/';

                iURL = (
                    new URL(iURL,  new URL(iBase || '', root))  +  ''
                ).replace(root, '');

                iDOM.setAttribute(
                    iKey,  iURL = expression ? decodeURI( iURL ) : iURL
                );
            }

            return iURL;
        },
        prefetch:     function (iURL) {
            if (! (
                (iURL[0] in URL_Prefix)  ||
                iURL.match( RenderNode.expression )  ||
                $('head link[href="' + iURL + '"]')[0]
            ))
                $('<link />', {
                    rel:     (($.browser.msie < 11)  ||  $.browser.ios)  ?
                        'next'  :  'prefetch',
                    href:    iURL
                }).appendTo( document.head );
        },
        parseSlot:    function (root, $_Root) {

            $_Root.find('slot[name]').each(function () {

                $('[slot="' + this.getAttribute('name') + '"]',  root)
                    .replaceAll( this );
            });

            $_Root.find('slot').each(function () {

                if (! arguments[0])
                    this.parentNode.replaceChild(
                        $.buildFragment( root.childNodes ),  this
                    );
                else
                    this.parentNode.removeChild( this );
            });
        },
        build:        function (root, base, HTML) {

            var $_Root = HTML  ?
                    $('<div />').prop('innerHTML', HTML)  :  $( root ),
                _This_ = this;

            if ( base.href )
                base = base.href;
            else if (base  =  $( root ).parents(
                '[data-href]:view:not([data-href^="?"])'
            )[0])
                base = base.dataset.href;


            $_Root.find(Object.keys( URL_DOM ) + '').not('head *').each(function () {

                var URL = _This_.fixURL(
                        this,
                        URL_DOM[ this.tagName.toLowerCase() ]  ||  (
                            ('src' in this)  ?  'src'  :  'data-href'
                        ),
                        base
                    );

                if (
                    $( this ).is( InnerLink.HTML_Link )  &&
                    ((this.target || '_self')  ===  '_self')
                ) {
                    if ($.urlDomain(this.href || this.action)  !==  $.urlDomain())
                        this.target = '_blank';

                    if ((this.target || '_self')  ===  '_self')
                        _This_.prefetch( URL );
                }

                if ($( this ).is(InnerLink.HTML_Link + ', ' + InnerLink.Self_Link))
                    new InnerLink( this );
            });


            if ( HTML ) {
                if ( root.childNodes[0] )  this.parseSlot(root, $_Root);

                root.appendChild( $.buildFragment( $_Root.contents() ) );
            }
        }
    };
})(jquery, view_RenderNode, InnerLink);


var view_HTMLView = (function ($, View, DOMkit, RenderNode) {

    function HTMLView($_View, iScope) {

        var _This_ = View.call(this, $_View, iScope);

        return  (_This_ !== this)  ?
            _This_ :
            this.setPrivate( {length: 0,  map: { }} );
    }

    View.extend(HTMLView, {
        is:             function () {

            return  (! $.expr[':'].list( arguments[0] ));
        },
        rawSelector:    $.makeSet('code', 'xmp', 'template'),
        getValue:       function (field) {

            if (field.type !== 'checkbox')
                return  $( field )[('value' in field) ? 'val' : 'html']();

            field = field.form.elements[ field.name ];

            return  $.likeArray( field )  ?
                $.map(field,  function (_This_) {

                    return  _This_.checked ? _This_.value : null;
                })  :  (
                    field.checked ? field.value : ''
                );
        }
    }, {
        indexOf:       Array.prototype.indexOf,
        signIn:        function (iNode) {

            for (var i = 0;  this[i];  i++)  if (this[i] == iNode)  return;

            this[this.length++] = iNode;

            var iName = (iNode instanceof RenderNode)  ?  iNode  :  [
                    iNode.__name__  ||  iNode.name
                ];

            for (var j = 0;  iName[j];  j++)
                this.watch( iName[j] ).__map__[iName[j]] =
                    (this.__map__[iName[j]] || 0)  +  Math.pow(2, i);
        },
        parsePlain:    function (iDOM) {

            Array.from(
                Array.prototype.concat.apply(
                    $.makeArray( iDOM.attributes ),  iDOM.childNodes
                ),
                function (node) {
                    if (
                        node.nodeValue  &&
                        (node.nodeType in RenderNode.Template_Type)
                    ) {
                        node = new RenderNode( node );

                        if ( node[0] )  this.signIn( node );
                    }
                },
                this
            );

            return this;
        },
        parse:         function () {

            return  this.scan(function (iNode) {

                var $_View = this.$_View,
                    tag = (iNode.tagName || '').toLowerCase();

                if ((iNode instanceof Element)  &&  (iNode !== $_View[0]))
                    switch ( tag ) {
                        case 'link':      {
                            if (('rel' in iNode)  &&  (iNode.rel != 'stylesheet'))
                                break;

                            iNode.onload = function () {

                                $( this ).replaceWith(
                                    DOMkit.fixStyle($_View, this)
                                );
                            };
                            return;
                        }
                        case 'style':     return  DOMkit.fixStyle($_View, iNode);
                        case 'script':    return  DOMkit.fixScript( iNode );
                    }

                if (iNode instanceof View) {

                    if (this.indexOf( iNode )  <  0)
                        this.parsePlain( iNode.$_View[0] ).signIn( iNode );

                } else if ( !(tag in HTMLView.rawSelector))
                    this.parsePlain( iNode );
            });
        },
        nodeOf:        function (data, exclude, forEach) {

            forEach = (forEach instanceof Function)  &&  forEach;

            var iMask = '0',  _This_ = this;

            for (var iName in data)
                if (this.__map__.hasOwnProperty( iName ))
                    iMask = $.bitOperate('|',  iMask,  this.__map__[ iName ]);

            return $.map(
                iMask.padStart(this.length, 0).split('').reverse(),
                function (bit, node) {

                    node = _This_[ node ];

                    if ((node !== exclude)  &&  (
                        (bit > 0)  ||  ((node || '').type > 1)
                    )) {
                        forEach  &&  forEach.call(_This_, node);

                        return node;
                    }
                }
            );
        },
        render:        function (iData, value) {

            var _Data_ = { },  exclude;

            if (iData instanceof Element) {

                exclude = iData;

                iData = exclude.getAttribute('name');

                value = HTMLView.getValue( exclude );
            }

            if (typeof iData.valueOf() === 'string') {

                _Data_[iData] = value;    iData = _Data_;
            }

            _Data_ = this.__data__;

            this.nodeOf(_Data_.commit( iData ),  exclude,  function (node) {

                if (node instanceof RenderNode)
                    node.render(this, _Data_);
                else if (node instanceof View) {

                    node.render(_Data_[node.__name__]);

                    _Data_[node.__name__] = node.__data__;
                } else
                    node.innerHTML = _Data_[ node.getAttribute('name') ];
            });

            return this;
        }
    }).registerEvent('template');

//  Render data from user input

    $('html').on('input change',  ':field',  $.throttle(function () {

        var iView = HTMLView.instanceOf( this );

        if (iView  &&  $( this ).validate())  iView.render( this );

    })).on('reset',  'form',  function () {

        var data = $.paramJSON('?'  +  $( this ).serialize());

        for (var key in data)  data[ key ] = '';

        HTMLView.instanceOf( this ).render( data );
    });

    return HTMLView;

})(jquery, view_View, view_DOMkit, view_RenderNode);


var view_ListView = (function ($, View, HTMLView, InnerLink) {

    function ListView($_View, iScope) {

        var _This_ = View.call(this, $_View, iScope);

        if (_This_ !== this)  return _This_;

        this.setPrivate({
            HTML:     this.$_View.html(),
            parse:    $.now()
        }).clear();
    }

    View.extend(ListView, {
        is:    $.expr[':'].list
    }, {
        splice:     Array.prototype.splice,
        clear:      function () {

            this.$_View.empty();

            this.splice(0, Infinity);

            return this;
        },
        insert:     function (iData, Index, iDelay) {

            var Item = (new HTMLView(this.__HTML__, this.__data__)).parse();

            Item.$_View.find( InnerLink.HTML_Link ).addBack( InnerLink.HTML_Link )
                .each(function () {

                    new InnerLink( this );
                });

            iData.__index__ = Index = Index || 0;

            this.splice(Index,  0,  Item.render( iData ));

            this.__data__.splice(Index,  0,  Item.__data__);

            if (! iDelay)  Item.$_View.insertTo(this.$_View, Index);

            return Item;
        },
        render:     function (list, index) {

            if (! (index != null))  this.clear();

            index = index || 0;

            if ($.likeArray( list ))
                $(Array.from(list,  function (data, i) {

                    return  this.insert(data, index + i, true).$_View[0];

                },  this)).insertTo(this.$_View, index);

            return this;
        },
        indexOf:    function ($_Item) {

            $_Item = ($_Item instanceof $)  ?  $_Item  :  $( $_Item );

            return (
                ($_Item[0].parentNode == this.$_View[0])  ?
                    $_Item  :  $_Item.parentsUntil( this.$_View )
            ).slice( -1 ).index();
        },
        remove:     function (Index) {

            var Item = this.splice(
                    $.isNumeric( Index )  ?  Index  :  this.indexOf( Index ),  1
                )[0];

            Item.$_View.remove();

            return Item;
        },
        sort:       function () {

            Array.prototype.sort.call(this, arguments[0]);

            this.$_View.append($.map(this,  function (Item) {

                Item.__index__ = arguments[1];

                return Item.$_View[0];
            }));

            return this;
        },
        valueOf:    function () {

            return  $.map(this,  function () {

                return arguments[0].valueOf();
            });
        }
    });

    return ListView;

})(jquery, view_View, view_HTMLView, InnerLink);


var view_TreeView = (function ($, ListView) {

    function TreeView($_View, scope) {

        $_View = $( $_View );

        this.setPrivate('self',  $_View[0].cloneNode( true ));

        this.__self__.removeAttribute('id');

        $_View.children().append(this.__self__ = this.__self__.outerHTML);

        var _This_ = ListView.call(this, $_View, scope);

        if (_This_ !== this)  return _This_;
    }

//  Tree Data Convert (Flat to 3D)

    TreeView.fromFlat = function (list, child_key) {

        child_key = child_key || 'list';

        var TempMap = { };

        $.each($.extend(true, [ ], list),  function () {

            var _This_ = TempMap[ this.id ];

            _This_ = TempMap[ this.id ] = _This_ ?
                $.extend(this, _This_)  :  this;

            this.pid = this.pid || 0;

            var parent = TempMap[ this.pid ] = TempMap[ this.pid ]  ||  { };

            (parent[ child_key ] = parent[ child_key ]  ||  [ ]).push(_This_);
        });

        return  TempMap[0][ child_key ];
    };

    return  ListView.extend( TreeView );

})(jquery, view_ListView);


var WebApp = (function ($, Observer, View, HTMLView, ListView, TreeView, DOMkit, InnerLink) {

    function WebApp(Page_Box, API_Root) {

        if (this instanceof $)
            return  new WebApp(this[0], Page_Box, API_Root);

        var _This_ = WebApp.instanceOf( $('*:webapp') )  ||  this;

        if (_This_ !== this)  return _This_;

        Observer.call(this, Page_Box).pageRoot = new URL($.filePath() + '/');

        this.apiRoot = new URL(API_Root || '',  this.pageRoot);

        this.length = 0;

        this.lastPage = -1;

        self.setTimeout( this.listen().boot.bind( this ) );
    }

    function linkOf(URL, part) {

        return this.filter(
            '[href'  +  (part ? '^' : '')  +  '="'  +  URL  +  '"]'
        );
    }

    return  Observer.extend(WebApp, {
        View:        View,
        HTMLView:    HTMLView,
        ListView:    ListView,
        TreeView:    TreeView
    }, {
        splice:           Array.prototype.splice,
        getCID:           function () {

            return  (arguments[0] + '').replace(this.pageRoot, '').split('#')[0];
        },
        getRoute:         function () {
            try {
                return self.atob(
                    (self.location.hash.match(/^\#!(.+)/) || '')[1]  ||  ''
                );
            } catch (error) { }
        },
        _emit:            function (iType, iLink, iData) {

            var $_Target = ((iLink.target === 'page')  ?  this  :  iLink).$_View;

            var observer = (iType in iLink.__handle__)  ?
                    iLink  :  View.instanceOf($_Target, false);

            iLink = $.extend(iLink.valueOf(), {
                type:      iType,
                target:    $_Target[0]
            });

            iData = this.emit(iLink, iData)  ||  iData;

            return  observer  ?  (observer.emit(iLink, iData)  ||  iData)  :  iData;
        },
        emitRoute:        function (link) {

            var $_Nav = $('a[href], area[href]'),  route = this.getRoute();

            var page = route.split('?')[0];

            var path = $.filePath( page )  ||  page,  $_Item;

            if (
                ($_Item = linkOf.call($_Nav, route))[0]  ||
                ($_Item = linkOf.call($_Nav, page))[0]  ||
                ($_Item = linkOf.call($_Nav, path, true))[0]
            )
                this._emit('route', link, $_Item);
        },
        switchTo:         function (Index) {

            if (this.lastPage == Index)  return;

            var iPage = View.instanceOf(this.$_View, false);

            if ( iPage )  iPage.detach();

            if (this.lastPage > -1)  this[ this.lastPage ].view = iPage;

            if (iPage = (this[ Index ]  ||  '').view) {

                iPage.attach();

                this.emitRoute( this[ Index ] );

                return iPage;
            }
        },
        setRoute:         function (iLink) {

            this.switchTo();

            if (this[ this.lastPage ]  !=  (iLink + '')) {

                if (++this.lastPage != this.length)
                    this.splice(this.lastPage, Infinity);

                self.history[
                    ((this.getRoute() == iLink) ? 'replace' : 'push')  +  'State'
                ](
                    {index: this.length},
                    document.title = iLink.title,
                    '#!'  +  self.btoa( this.getCID( iLink ) )
                );

                this.emitRoute( this[ this.length++ ] = iLink );
            }

            return this;
        },
        loadView:         function (iLink, iHTML) {

            var iTarget = (
                    (iLink.target === 'page')  ?  this.setRoute( iLink )  :  iLink
                ).$_View[0];

            if (iHTML = this._emit('template', iLink, iHTML))
                DOMkit.build(iTarget, iLink, iHTML);

            var iView = View.getSub( iTarget );

            if ( iView.parse )  iView.parse();

            if (! $('script:not(head > *)', iTarget)[0])
                iLink.emit('load');

            return iView;
        },
        loadChild:        function (view) {

            return Promise.all($.map(
                view.childOf(':visible'),  this.load.bind( this )
            )).then(function () {

                return view;
            });
        },
        loadComponent:    function (iLink, iHTML, iData) {

            var JS_Load = iLink.one('load'),  iView = this.loadView(iLink, iHTML);

            return  JS_Load.then(function (iFactory) {

                iData = $.extend(
                    iData,  iLink.data,  iLink.$_View[0].dataset,  iData
                );

                return iView.render(
                    iFactory  ?  (iFactory.call(iView, iData)  ||  iData)  :  iData
                );
            }).then( this.loadChild.bind( this ) );
        },
        autoFocus:        function (global) {

            var target = $(
                    'a[href][data-autofocus="true"]',
                    global ? document : this.$_View[0]
                )[0];

            if ( target ) {

                target.click();

                return  this.one({type: 'ready',  target: this.$_View[0]});
            }
        },
        load:             function (iLink) {

            if (! (iLink instanceof InnerLink))
                iLink = new InnerLink(
                    (iLink instanceof Observer)  ?  iLink.$_View[0]  :  iLink
                );

            var _This_ = this;

            return  iLink.load(function () {

                if ((this.dataType || '').slice(0, 4)  ===  'json')
                    this.url = (new URL(this.url, _This_.apiRoot))  +  '';

                _This_._emit('request', iLink, {
                    option:       this,
                    transport:    arguments[0]
                });

                this.crossDomain = $.isXDomain( this.url );

            }).then(function () {

                var iData = arguments[0][1];

                if (iData != null) {

                    iLink.header = iData.head;

                    iData = _This_._emit('data', iLink, iData.body);
                }

                if (iLink.target !== 'data')
                    return  _This_.loadComponent(iLink, arguments[0][0], iData);

            }).then(function (view) {

                if (! (view instanceof View))  return;

                var promise = view.one('ready');

                _This_._emit('ready', iLink, view);

                if (iLink.target === 'page')
                    promise = _This_.autoFocus() || promise;

                return promise;
            });
        },
        loadPage:         function (iURI) {

            iURI = iURI || 0;

            if (isNaN( iURI ))
                return  this.load( $('<a href="' + iURI + '" />')[0] );

            var link = this[this.lastPage + iURI];

            if ( link )  delete link.view;

            self.history.go( iURI );

            return  this.one({type: 'ready',  target: this.$_View[0]});
        },
        listen:           function () {

            var _This_ = this;

            $('html').on('click submit',  InnerLink.HTML_Link,  function (iEvent) {
                if (
                    ((this.tagName !== 'FORM')  ||  (iEvent.type === 'submit'))  &&
                    ((this.target || '_self')  ===  '_self')  &&
                    _This_.getCID(this.href || this.action)
                ) {
                    iEvent.preventDefault();

                    _This_.load( this );
                }
            });

            $( self ).on('popstate',  function () {

                var state = this.history.state || '',  route = _This_.getRoute();

                var link = _This_[ state.index ];

            //  To reload history pages after the Web App reloading

                if ((! link)  ||  (
                    route  &&  (! state.data)  &&  (route != _This_.getCID( link ))
                ))
                    return  route  &&  _This_.loadPage( route );

                if (_This_.lastPage !== state.index)
                    Promise.resolve(
                        _This_.switchTo( state.index )  ||  _This_.load( link )
                    ).then(function () {

                        _This_.lastPage = state.index;

                        document.title = link.title;
                    });
                else if ( state.data )
                    View.instanceOf(_This_.$_View, false).render( state.data );
            });

            return this;
        },
        boot:             function () {

            DOMkit.build(document.body, '');

            var root = (new HTMLView('html')).parse().render( $.paramJSON() ),
                _This_ = this;

            return  this[root.$_View[0].dataset.href ? 'load' : 'loadChild'](
                root
            ).then(function () {

                var Init = _This_.getRoute();

                return  Init ?
                    _This_.loadPage( Init )  :  _This_.autoFocus( true );
            });
        }
    });
})(jquery, base_Observer, view_View, view_HTMLView, view_ListView, view_TreeView, view_DOMkit, InnerLink);


//
//                    >>>  EasyWebApp.js  <<<
//
//
//      [Version]    v4.0  (2017-10-17)  stable
//
//      [Require]    iQuery  ||  jQuery with jQueryKit
//
//      [Usage]      A Light-weight SPA Engine with
//                   jQuery Compatible API.
//
//
//              (C)2015-2017    shiy2008@gmail.com
//


return  (function ($, WebApp, InnerLink) {

/* ---------- AMD based Component API ---------- */

    var _require_ = self.require,  _link_;

    self.require = $.extend(function () {

        if (! document.currentScript)  return _require_.apply(this, arguments);

        var iArgs = arguments,  iWebApp = new WebApp();

        var view = WebApp.View.instanceOf( document.currentScript );

        var link = (view.$_View[0] === iWebApp.$_View[0])  ?
                iWebApp[ iWebApp.lastPage ]  :
                InnerLink.instanceOf( view.$_View );

        _require_.call(this,  iArgs[0],  function () {

            _link_ = link;

            return  iArgs[1].apply(this, arguments);
        });
    },  _require_);


    WebApp.component = function (iFactory) {

        if (_link_)  _link_.emit('load', iFactory);

        return this;
    };

    $.extend(WebApp.prototype, {
        setURLData:    function (key, value) {

            var URL = this.getRoute().split(/&?data=/);

            if (typeof key === 'string') {

                var name = key;  key = { };

                key[ name ] = value;
            }

            if (!  $.isEqual(key,  $.intersect(key, $.paramJSON( URL[0] ))))
                self.history.pushState(
                    {
                        index:    this.lastPage,
                        data:     key
                    },
                    document.title,
                    '#!' + self.btoa(
                        $.extendURL(URL[0], key)  +  (
                            URL[1]  ?  ('&data=' + URL[1])  :  ''
                        )
                    )
                );

            return this;
        }
    });

/* ---------- jQuery based Helper API ---------- */

    $.fn.view = function (Class_Name) {

        if (! this[0])  return;

        return  Class_Name  ?
            (new WebApp[Class_Name](this[0], arguments[1]))  :
            WebApp.View.instanceOf(this[0], false);
    };

    return  $.fn.iWebApp = WebApp;

})(jquery, WebApp, InnerLink);
});