//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('EasyWebApp',  ['jquery', 'jQueryKit'],  factory);
    else if (typeof module === 'object')
        module.exports = factory(require('jquery'), require('jQueryKit'));
    else
        this.EasyWebApp = factory(this['jquery'], this['jQueryKit']);

})(function (jquery, jQueryKit) {


var base_Observer = (function ($) {

    /**
     * 多条件观察者
     *
     * @author  TechQuery
     *
     * @class   Observer
     *
     * @param   {jQueryAcceptable} $_View      - Container DOM of Observer
     * @param   {boolean}          [all_event] - Register all kinds of
     *                                           event handlers in HTML code
     *
     * @returns {Observer}         Return the last one if a Observer instance
     *                             has been created on this element
     */

    function Observer($_View, all_event) {
        /**
         * 容器元素的 jQuery 包装
         *
         * @name     $_View
         * @type     {jQuery}
         *
         * @memberof Observer
         * @instance
         *
         * @readonly
         */
        this.$_View = ($_View instanceof $)  ?  $_View  :  $( $_View );

        this.setPrivate('handle',  { });

        return  this.init( all_event );
    }

    function basicMethod(iClass) {

        var iType = Observer.prototype.toString.call({constructor: iClass});

        $.extend(iClass.prototype, {
            init:          function (all_event) {

                var _This_ = this.$_View.data( iType );

                return  ((_This_ != null)  &&  (_This_ !== this))  ?
                    _This_  :
                    $.data(this.$_View[0],  iType,  this.setHandle( all_event ));
            },
            setHandle:     function (all_event) {

                var _This_ = this;

                $.each(this.$_View[0].attributes,  function () {

                    var iName = (this.nodeName.match(/^on(\w+)/i) || '')[1];

                    if (
                        (! iName)  ||
                        !(all_event  ||  (iName in iClass.Bind_Event))  ||
                        (this.nodeName in this.ownerElement)
                    )
                        return;

                    Object.defineProperty(this.ownerElement,  'on' + iName,  {
                        set:    function (iHandler) {

                            _This_.off( iName );

                            if (typeof iHandler === 'function')
                                _This_.on(iName, iHandler);
                        },
                        get:    function () {

                            return Observer.prototype.valueOf.call(
                                _This_,  iName,  'handler'
                            )[0];
                        }
                    });
                });

                return this;
            },
            destructor:    function () {

                this.$_View.removeData( iType );

                return  this.valueOf.apply(this, arguments);
            }
        });

        return  $.extend(iClass, {
            Bind_Event:       { },
            /**
             * 注册子类事件类型
             *
             * @author    TechQuery
             *
             * @memberof  Observer
             * @protected
             *
             * @param     {...string} name - Event Names
             *
             * @returns   {function}  Sub Class of Observer
             */
            registerEvent:    function (name) {

                $.extend(iClass.Bind_Event,  $.makeSet.apply($, arguments));

                return this;
            },
            signSelector:     function () {

                var _This_ = this;

                $.expr[':'][ this.name.toLowerCase() ] = function () {
                    return (
                        ($.data(arguments[0], iType) || '')  instanceof  _This_
                    );
                };

                return this;
            },
            /**
             * 从一个元素节点开始向上查找实例，并返回首个发现的实例
             *
             * @author   TechQuery
             *
             * @memberof Observer
             *
             * @param    {jQueryAcceptable} $_DOM        Search up from this Element
             * @param    {boolean}          Check_Parent
             *
             * @returns  {Observer}         Observer instance
             */
            instanceOf:       function ($_DOM, Check_Parent) {

                var _Instance_,  element = $( $_DOM )[0];

                while ( element ) {

                    _Instance_ = $.data(element, iType);

                    if (_Instance_ instanceof this)  return _Instance_;

                    element = (Check_Parent !== false)  &&  element.parentNode;
                }
            }
        }).signSelector();
    }

    return  basicMethod($.Class.extend(Observer, {
        /**
         * 继承出一个观察者子类
         *
         * @author   TechQuery
         *
         * @memberof Observer
         *
         * @param    {function} constructor - Constructor of the Sub Class
         * @param    {?object}  Static      - Static properties
         * @param    {object}   [prototype] - Instance properties
         *
         * @returns  {function} The Sub Class
         */
        extend:      function (constructor, Static, prototype) {

            return basicMethod($.Class.extend.call(
                this,  constructor,  Static,  prototype
            ));
        },
        getEvent:    function (event) {

            return $.extend(
                { },
                (typeof event == 'string')  ?  {type: event}  :  event,
                arguments[1]
            );
        },
        match:       function (event, iHandle) {
            var iRegExp;

            for (var iKey in iHandle) {

                iRegExp = event[iKey] instanceof RegExp;

                switch ($.Type( iHandle[iKey] )) {
                    case 'RegExp':
                        if ( iRegExp ) {
                            if (event[iKey].toString() != iHandle[iKey].toString())
                                return;
                            break;
                        }
                    case 'String':    {
                        if (! (event[iKey] || '')[iRegExp ? 'test' : 'match'](
                            iHandle[iKey]
                        ))
                            return;
                        break;
                    }
                    case 'Function':
                        if (typeof event[iKey] != 'function')  break;
                    default:
                        if (event[iKey] !== iHandle[iKey])  return;
                }
            }

            return iHandle;
        }
    }, {
        toString:    function () {

            return  '[object ' + this.constructor.name + ']';
        },
        /**
         * 查询事件
         *
         * @author   TechQuery
         *
         * @memberof Observer.prototype
         *
         * @param    {string}          [event] - Event Name
         * @param    {string}          [key]   - Key of Event property
         *
         * @returns  {object|object[]} Event Handlers
         */
        valueOf:     function (event, key) {

            if (! event)  return  this.__handle__;

            return  (! key)  ?  this.__handle__[event]  :
                $.map(this.__handle__[event],  function () {

                    return  arguments[0][ key ];
                });
        },
        /**
         * 注册一个事件回调
         *
         * @author   TechQuery
         *
         * @memberof Observer.prototype
         *
         * @param    {string|object} event    - An Event Name or Event Object
         * @param    {function}      callback
         *
         * @returns  {Observer}      Current Observer
         */
        on:          function (event, callback) {

            event = Observer.getEvent(event,  {handler: callback});

            var iHandle = this.__handle__[event.type] =
                    this.__handle__[event.type]  ||  [ ];

            for (var i = 0;  iHandle[i];  i++)
                if ($.isEqual(iHandle[i], event))  return this;

            iHandle.push( event );

            return this;
        },
        /**
         * 触发一个事件
         *
         * @author   TechQuery
         *
         * @memberof Observer.prototype
         *
         * @param    {string|object} event  - An Event Name or Event Object
         * @param    {*}             [data] - Additional Data for callbacks
         *
         * @returns  {*}             Data returned by last callback
         */
        emit:        function (event, iData) {

            event = Observer.getEvent( event );

            return  (this.__handle__[event.type] || [ ]).reduce(
                (function (_Data_, iHandle) {

                    if (! Observer.match(event, iHandle))  return _Data_;

                    var iResult = iHandle.handler.call(this, event, _Data_);

                    return  (iResult != null)  ?  iResult  :  _Data_;

                }).bind( this ),
                iData
            );
        },
        /**
         * 注销事件回调
         *
         * @author   TechQuery
         *
         * @memberof Observer.prototype
         *
         * @param    {string|object}  event      An Event Name or Event Object
         * @param    {function}       [callback]
         *
         * @returns  {Observer}       Current Observer
         */
        off:         function (event, callback) {

            event = Observer.getEvent(event,  {handler: callback});

            this.__handle__[event.type] = $.map(
                this.__handle__[event.type],  function (iHandle) {

                    return  Observer.match(event, iHandle)  ?  null  :  iHandle;
                }
            );

            return this;
        },
        /**
         * 注册一个事件回调（一次性）
         *
         * @author   TechQuery
         *
         * @memberof Observer.prototype
         *
         * @param    {string|object}    event      An Event Name or Event Object
         * @param    {function}         [callback]
         *
         * @returns  {Observer|Promise} Current Observer or Promise
         */
        one:         function () {

            var _This_ = this,  iArgs = $.makeArray( arguments );

            var callback = iArgs.slice(-1)[0];

            callback = (typeof callback === 'function')  &&  iArgs.pop();

            var iPromise = new Promise(function (iResolve) {

                    _This_.on.apply(_This_,  iArgs.concat(function once() {

                        _This_.off.apply(_This_,  iArgs.concat( once ));

                        if ( callback )  return  callback.apply(this, arguments);

                        iResolve( arguments[1] );
                    }));
                });

            return  callback ? this : iPromise;
        }
    }));
})(jquery);


var view_RenderNode = (function ($) {

    /**
     * 渲染节点
     *
     * @author TechQuery
     *
     * @class  RenderNode
     *
     * @param  {Node} node - A Node within a template
     */

    function RenderNode(node) {

        $.extend(this, {
            ownerNode:       node,
            raw:             node.nodeValue || node.value,
            ownerElement:    node.parentNode || node.ownerElement,
            type:            0,
            value:           null
        }).update();

        this.scan();
    }

    RenderNode.expression = /\$\{([\s\S]+?)\}/g;

    RenderNode.reference = /(\w+)(\.|\[(?:'|")|\()(\w+)?/g;

    RenderNode.rawName = /^(data\-|on)\w+/;

    RenderNode.Reference_Mask = {
        view:     1,
        this:     4,
        scope:    8
    };

    RenderNode.Template_Type = $.makeSet('Attr', 'Text', 'Comment');

    function Eval(view, scope, expression) {  'use strict';
        try {
            var iValue = eval( expression );

            return  (iValue != null)  ?  iValue  :  '';

        } catch (iError) {

            console.error( iError );

            return '';
        }
    }

    $.extend(RenderNode.prototype = [ ],  {
        constructor:    RenderNode,
        update:         function () {

            var node = this.ownerNode;

            if (! node)  return;

            var name = node.name;

            this.DOMType = $.Type( node );

            if (this.DOMType !== 'Attr')  return;

            var propKey = $.propFix[ name ]  ||  (
                    (name in node.ownerElement)  &&  name
                );

            if ( propKey )
                this.name = propKey,  this.DOMType = 'Prop';
            else
                this.name = name;
        },
        add:            function (key) {

            if (key  &&  (this.indexOf( key )  <  0))
                this.push( key );
        },
        clear:          function () {

            var node = this.ownerNode,
                value = this.raw.replace(RenderNode.expression, '');

            switch ( this.DOMType ) {
                case 'Text':       ;
                case 'Comment':    return  (node.nodeValue = value);
                case 'Attr':       ;
                case 'Prop':
                    if (! (
                        (node.value = value)  ||
                        node.name.match( RenderNode.rawName )
                    )) {
                        this.ownerElement.removeAttribute( node.name );

                        this.ownerNode = null;
                    }
            }
        },
        scan:           function () {

            var _This_ = this;

            this.splice(0, Infinity);    this.type = 0;

            this.raw = this.raw.replace(
                RenderNode.expression,  function (_, expression) {

                    if (/\w+\s*\([\s\S]*?\)/.test( expression ))
                        _This_.type = _This_.type | 2;

                    expression.replace(
                        RenderNode.reference,  function (_, scope, symbol, key) {

                            var global = self[ scope ];

                            if ( global )
                                return  _This_.type = _This_.type | 16;

                            if (symbol[0] === '(')  return;

                            _This_.type = _This_.type |
                                RenderNode.Reference_Mask[ scope ];

                            if (scope !== 'this')  _This_.add( key );
                        }
                    );

                    return  '${' + expression.trim() + '}';
                }
            );

            if ( this[0] )  this.clear();
        },
        eval:           function (context, scope) {

            if (this.value === null)  this.update();

            var refer,  _This_ = this.ownerElement;

            var text = this.raw.replace(
                    RenderNode.expression,
                    function (template, expression, _, raw) {

                        refer = Eval.call(_This_, context, scope, expression);

                        return  (template == raw)  ?  raw  :  refer;
                    }
                );

            return  (this.raw == text)  ?  refer  :  text;
        },
        render:         function (context, scope) {

            var value = this.eval(context, scope),
                node = this.ownerNode,
                parent = this.ownerElement;

            if (value === this.value)  return;

            this.value = value;

            switch ( this.DOMType ) {
                case 'Text':    {
                    if (node.previousSibling || node.nextSibling)
                        node.nodeValue = value;
                    else
                        parent.innerHTML = value;

                    break;
                }
                case 'Prop':    if (this.name !== 'style') {

                    parent[ this.name ] = (value instanceof Function)  ?
                        value.bind( context )  :  value;

                    break;
                }
                case 'Attr':
                    if ( node )
                        node.value = value;
                    else
                        parent.setAttribute(this.name, value);
            }
        },
        /**
         * 生成文本值
         *
         * @author   TechQuery
         *
         * @memberof RenderNode.prototype
         *
         * @returns  {string} Text Value of this template
         */
        toString:       function () {

            return  this.value + '';
        }
    });

    return RenderNode;

})(jquery);


var InnerLink = (function ($, Observer) {

    /**
     * 应用内链接
     *
     * @author  TechQuery
     *
     * @class   InnerLink
     * @extends Observer
     *
     * @param   {jQueryAcceptable} $_View - HTMLElement of Inner Link
     *
     * @returns {InnerLink}        Return the last one if a InnerLink instance
     *                             has been created on this element
     */

    function InnerLink($_View) {

        var _This_ = Observer.call(this, $_View);

        return  ((_This_ !== this)  ?  _This_  :  this).setProp();
    }

    return  Observer.extend(InnerLink, {
        parsePath:    function (iPath) {

            var iNew;  iPath = iPath.replace(/^\.\//, '').replace(/\/\.\//g, '/');

            do {
                iPath = iNew || iPath;

                iNew = iPath.replace(/[^\.\/]+\/\.\.\//g, '');

            } while (iNew  &&  (iNew !== iPath));

            return iNew;
        },
        HTML_Link:    'a[href], area[href], form[action]',
        Self_Link:    '[data-href]:not(a, form)'
    }, {
        setProp:     function () {

            var link = this.$_View[0];

            this.method = (
                link.getAttribute('method') || link.dataset.method || 'Get'
            ).toUpperCase();

            this.contentType =
                link.getAttribute('type') || link.getAttribute('enctype') ||
                'application/x-www-form-urlencoded';

            this.charset = (
                link.getAttribute('charset') || link.acceptCharset ||
                document.charset
            ).split(/\s+/);

            this.setURI().title = link.title || document.title;

            if (! /^(a|area|form)$/i.test( link.tagName ))
                this.target = 'view';
            else if ( this.href )
                this.target = 'page';
            else
                this.target = 'data';

            return this;
        },
        setURI:      function () {

            var link = this.$_View[0];

            this.href = link.dataset.href ||
                link.getAttribute(link.href ? 'href' : 'action');

            this.src = this.href.split(/\?data=|&data=/);

            this.href = this.src[0];

            this.src = this.src[1];

            this.data = $.paramJSON( this.href );

            this.href = InnerLink.parsePath( this.href.split('?')[0] );

            return this;
        },
        /**
         * 生成 URI
         *
         * @author   TechQuery
         *
         * @memberof InnerLink.prototype
         *
         * @returns  {string} URI of this Inner Link
         */
        toString:    function () {

            var iData = [$.param( this.data )];

            if (! iData[0])  iData.length = 0;

            if ( this.src )  iData.push('data=' + this.src);

            iData = iData.join('&');

            return  (this.href || '')  +  (iData  &&  ('?' + iData));
        },
        loadData:    function () {

            var header;

            var option = {
                    method:         this.method,
                    url:            this.src,
                    beforeSend:     arguments[0],
                    contentType:
                        this.contentType  +  '; charset='  +  this.charset[0],
                    dataType:
                        (this.src.match(/\?/g) || '')[1]  ?  'jsonp'  :  'json',
                    complete:       function (XHR) {

                        header = $.parseHeader( XHR.getAllResponseHeaders() );
                    }
                };

            switch ( this.$_View[0].tagName.toLowerCase() ) {
                case 'form':
                    option.data = $.paramJSON('?' + this.$_View.serialize());
                    break;
                case 'area':    ;
                case 'a':       {
                    option.data = $.extend({ }, this.$_View[0].dataset);

                    delete option.data.method;
                    delete option.data.autofocus;
                }
            }

            switch ( this.contentType.split(';')[0] ) {

                case 'multipart/form-data':

                    $.extend(option, {
                        data:           new self.FormData( this.$_View[0] ),
                        contentType:    false,
                        processData:    false
                    });
                    break;
                case 'application/json': {

                    option.data = JSON.stringify( option.data );

                    option.processData = false;
                }
            }

            return  Promise.resolve( $.ajax( option ) ).then(function (data) {

                return  {head: header,  body: data};
            });
        },
        load:        function (onRequest) {

            return Promise.all([
                this.href  &&  $.ajax({
                    type:          'GET',
                    url:           this.href,
                    beforeSend:    onRequest
                }),
                this.src  &&  this.loadData( onRequest )
            ]);
        },
        valueOf:     function () {

            var _This_ = { };

            for (var iKey in this)
                if (this.hasOwnProperty( iKey ))  _This_[iKey] = this[iKey];

            delete _This_.$_View;

            _This_.target = this.$_View[0];

            return _This_;
        }
    }).registerEvent('request', 'data');

})(jquery, base_Observer);


var base_DataScope = (function ($) {

    /**
     * 数据作用域
     *
     * @author  TechQuery
     *
     * @class   DataScope
     * @extends Array
     *
     * @param   {object|object[]|DataScope} parent - Parent Scope
     *
     * @returns {DataScope}                 New Scope inherit from its Parent Scope
     */

    function DataScope(parent) {

        return  (parent instanceof DataScope)  ?  Object.create( parent )  :  this;
    }

    $.extend(DataScope.prototype = [ ],  {
        constructor:    DataScope,
        commit:         function (data, filter) {

            data = data.valueOf();

            var diff = { };

            for (var key in data)
                if (
                    (data[ key ]  !=  null)  ||
                    (! this.hasOwnProperty( key ))  ||
                    (this[key] !== data[key])
                )
                    this[ key ] = diff[ key ] = data[ key ];

            return diff;
        },
        valueOf:        function () {

            if ( this.hasOwnProperty('length') )
                return  Array.from(this,  function (data) {

                    return data.valueOf();
                });

            var data = { };

            for (var key in this)
                if ( this.hasOwnProperty( key ) )
                    data[ key ] = this[ key ].valueOf();

            return data;
        }
    });

    return DataScope;

})(jquery);


var view_View = (function ($, Observer, DataScope, RenderNode) {

    /**
     * 视图抽象类
     *
     * @author  TechQuery
     *
     * @class   View
     * @extends Observer
     *
     * @param   {jQueryAcceptable} $_View  - Container DOM of View
     * @param   {object}           [scope] - Data object as a scope
     * @param   {(string|URL)}     [base]
     *
     * @returns {View}                 Return the last one if a View instance
     *                                 has been created on this element
     */

    function View($_View, scope, base) {

        var _This_ = Observer.call(
                $.Class.call(this, View, ['render']),  $_View,  true
            );

        _This_.setPrivate('base',  base || View.baseOf( _This_.$_View[0] ));

        return  (_This_ !== this)  ?
            _This_ :
            this.setPrivate({
                id:          '',
                name:        this.$_View[0].dataset.name,
                /**
                 * 视图数据作用域
                 *
                 * @name      __data__
                 * @type      {DataScope}
                 *
                 * @memberof  View
                 * @instance
                 *
                 * @protected
                 */
                data:        new DataScope( scope ),
                parse:       0,
                child:       [ ],
                observer:    null
            }).attach();
    }

    var Sub_Class = [ ];

    return  Observer.extend(View, {
        baseOf:    function (box) {

            if (box.dataset.href  &&  (box.dataset.href[0] !== '?'))
                return  $.filePath( box.dataset.href );
        },
        getSub:    function ($_View, scope, base) {

            $_View = $( $_View );

            var is_View = $_View.attr('is');

            for (var i = Sub_Class.length - 1;  Sub_Class[i];  i--)
                if (
                    is_View ?
                        (is_View === Sub_Class[i].name)  :
                        Sub_Class[i].is( $_View[0] )
                )
                    return  new Sub_Class[i](
                        $_View,
                        scope  ||
                            (this.instanceOf( $_View.parent() )  ||  '').__data__,
                        base
                    );
        },
        /**
         * 继承出一个视图子类
         *
         * @author   TechQuery
         *
         * @memberof View
         *
         * @param    {function} constructor - Constructor of the Sub Class
         * @param    {?object}  Static      - Static properties
         * @param    {object}   [prototype] - Instance properties
         *
         * @returns  {function} The Sub Class
         */
        extend:    function (constructor, Static, prototype) {

            Sub_Class.push( constructor );

            Static = Static  ||  { };

            Static.is = Static.is || $.noop;

            return $.Class.extend.call(
                this,  constructor,  Static,  prototype
            ).signSelector();
        }
    }, {
        attrWatch:     function () {
            var _This_ = this;

            this.__observer__ = new self.MutationObserver(function () {

                var iData = { };

                $.each(arguments[0],  function () {

                    var iNew = this.target.getAttribute( this.attributeName );

                    if (
                        (iNew != this.oldValue)  &&
                        (! (this.oldValue || '').match( RenderNode.expression ))
                    )
                        iData[$.camelCase( this.attributeName.slice(5) )] = iNew;
                });

                /**
                 * 自定义属性 更新事件
                 *
                 * @event    View#update
                 *
                 * @type     {object}
                 *
                 * @property {string}      type   - Event Name
                 * @property {HTMLElement} target - View container
                 */

                if (_This_.__parse__  &&  (! $.isEmptyObject( iData )))
                    _This_.render( iData ).emit({
                        type:      'update',
                        target:    _This_.$_View[0]
                    }, iData);
            });

            this.__observer__.observe(this.$_View[0], {
                attributes:           true,
                attributeOldValue:    true,
                attributeFilter:      $.map(
                    Object.keys( this.$_View[0].dataset ),
                    function () {
                        return  'data-'  +  $.hyphenCase( arguments[0] );
                    }
                )
            });
        },
        /**
         * 挂载视图
         *
         * @author   TechQuery
         *
         * @memberof View.prototype
         *
         * @fires    View#attach
         *
         * @returns  {View} Current View
         */
        attach:        function () {

            if (! this.$_View[0].id)
                this.$_View[0].id = this.__id__ || $.uuid('View');

            this.__id__ = this.$_View[0].id;

            this.$_View.data('[object View]', this);

            if ( this.$_View[0].dataset.href )  this.attrWatch();

            /**
             * 视图挂载完成事件
             *
             * @event    View#attach
             *
             * @type     {object}
             *
             * @property {string}      type   - Event Name
             * @property {HTMLElement} target - View container
             */

            this.emit({
                type:      'attach',
                target:    this.$_View.append( this.$_Content )[0]
            });

            return this;
        },
        /**
         * 卸载视图
         *
         * @author   TechQuery
         *
         * @memberof View.prototype
         *
         * @returns  {View} Current View
         */
        detach:        function () {

            if ( this.$_View[0].id.match(/^View_\w+/) )  this.$_View[0].id = '';

            this.$_View.data('[object View]', null);

            if (this.__observer__) {
                this.__observer__.disconnect();

                delete this.__observer__;
            }

            this.$_Content = this.$_View.children().detach();

            return this;
        },
        /**
         * HTML 树解析器
         *
         * @callback View~parser
         *
         * @this  View
         * @param {HTMLElement|View} node - A Renderable Object
         */
        /**
         * HTML 树扫描器
         *
         * @author    TechQuery
         *
         * @memberof  View.prototype
         * @protected
         *
         * @param     {View~parser} parser - A callback to process HTMLElement
         *
         * @returns   {View}        Current View
         */
        scan:          function (parser) {

            var Sub_View = [ ];

            var iSearcher = this.$_View.treeWalker((function (node) {

                    var iView;

                    if ((this.$_View[0] !== node)  &&  (node.nodeType === 1)) {

                        if ( node.dataset.href ) {

                            parser.call(this, node);

                            iView = View.getSub( node );

                            if (this.__child__.indexOf( iView )  <  0)
                                this.__child__.push( iView );

                            return null;

                        } else if (
                            node.dataset.name  ||
                            (iView = View.instanceOf(node, false))
                        ) {
                            parser.call(this, node);

                            if (! iView)
                                iView = View.getSub(node,  null,  this.__base__);

                            Sub_View.push(iView.parse ? iView.parse() : iView);

                            return null;

                        } else if (
                            (node.parentNode == document.head)  &&
                            (node.tagName.toLowerCase() != 'title')
                        )
                            return null;
                    }

                    return  parser.call(this, node);

                }).bind( this ));

            while (! iSearcher.next().done)  ;

            for (var i = 0;  Sub_View[i];  i++)
                parser.call(this, Sub_View[i]);

            this.__parse__ = $.now();

            return this;
        },
        /**
         * 视图对象 属性监视
         *
         * @author TechQuery
         *
         * @memberof View.prototype
         *
         * @param {string} key       - Property Key
         * @param {object} [get_set] - Getter & Setter
         *
         * @returns {View}  Current View
         *
         * @throws {ReferenceError}  When Prototype key or Array index
         *                           is overwritten
         */
        watch:         function (key, get_set) {
            if (
                (key  in  Object.getPrototypeOf( this ))  ||
                ((typeof this.length === 'number')  &&  $.isNumeric( key ))
            )
                throw ReferenceError(
                    'Inner Property "' + key + '" can\'t be overwritten.'
                );

            this.setPublic(key, get_set, {
                get:    function () {

                    return  this.__data__[key];
                },
                set:    this.render.bind(this, key)
            });

            return this;
        },
        /**
         * 获取视图上的数据
         *
         * @author   TechQuery
         *
         * @memberof View.prototype
         *
         * @returns  {object} Data of this View in plain object
         */
        valueOf:       function () {

            return  this.__data__.valueOf();
        },
        /**
         * 清空视图
         *
         * @author TechQuery
         *
         * @return {View}  Current View
         */
        clear:         function () {

            var data = this.valueOf(), _data_ = { };

            for (var key in data)
                if (! (data[key] instanceof Function))  _data_[key] = '';

            return  this.render(_data_);
        },
        /**
         * 获取子组件
         *
         * @author   TechQuery
         *
         * @memberof View.prototype
         *
         * @param    {string}  [$_Filter] - jQuery Selector
         *
         * @returns  {View[]}  Array of Child Component
         */
        childOf:       function ($_Filter) {

            var children = this.__child__ || this;

            return  $_Filter ?
                $.map(children,  function (VM) {

                    return  VM.$_View.is( $_Filter )  ?  VM  :  null;
                }) :
                Array.from( children );
        }
    }).registerEvent('ready', 'update');

})(jquery, base_Observer, base_DataScope, view_RenderNode);


var view_DOMkit = (function ($, RenderNode, InnerLink) {

    var Invalid_Style = $.makeSet('inherit', 'initial'),
        URL_Prefix = $.makeSet('?', '#');

    function mapStyle(style, filter) {

        var context = this, key_value = { };

        $.each(style,  function () {

            var value = style.getPropertyValue( this ), _value_,
                priority = style.getPropertyPriority( this );

            if ( filter ) {

                if (null  !=  (_value_ = filter.call(
                    context,  value,  this + '',  priority,  style
                )))
                    value = _value_;
                else
                    return;
            }

            if ( priority )  value += ' !' + priority;

            if (! (value in Invalid_Style))  key_value[ this ] = value;
        });

        return  key_value;
    }

    function pathToRoot(base, path) {

        return (
            !(path[0] in URL_Prefix)  &&  path.replace(RenderNode.expression, '')
        )  &&
            decodeURI(
                new URL(path,  new URL(base, self.location))
            ).replace(
                $.filePath(), ''
            );
    }

    function fixCSSURL(base, value) {

        return  value.replace(
            /\s?url\(\s*(?:'|")(\S+)(?:'|")\)/g,
            function (_, path) {

                return  'url("'  +  (pathToRoot(base, path) || path)  +  '")';
            }
        );
    }

    return {
        cssRule:      function cssRule(sheet, mapFilter) {

            mapFilter = (mapFilter instanceof Function)  &&  mapFilter;

            var rule = { };

            $.each(sheet.cssRules,  function () {

                if ( this.cssRules )
                    rule[ this.cssText.split( /\s*\{/ )[0] ] =
                        cssRule(this, mapFilter);
                else
                    rule[this.selectorText || this.keyText] =
                        mapStyle.call(sheet, this.style, mapFilter);
            });

            return rule;
        },
        fixStyle:     function ($_Root, iDOM, base) {

            if ( iDOM.classList.contains('iQuery_CSS-Rule') )  return iDOM;

            var rule = this.cssRule(
                    iDOM.sheet,  base && fixCSSURL.bind(null, base)
                );

            iDOM = [ ];

            $.each(rule,  function (selector) {

                var At_Rule = selector.match( /^@\S*?(\w+)\s*([\s\S]+)/ );

                if (! At_Rule)  return;

                switch ( At_Rule[1] ) {
                    case 'media':
                        $_Root.cssRule(this,  function () {

                            iDOM[iDOM.push( arguments[0].ownerNode ) - 1].media =
                                At_Rule[2];
                        });
                        break;
                    case 'keyframes':
                        iDOM.push( $.cssRule(selector,  this) );
                        break;
                    case 'supports':
                        if (
                            (CSS.supports instanceof Function)  &&
                            CSS.supports( At_Rule[2] )
                        )
                            $.extend(true,  rule,  this);
                }

                delete  rule[ selector ];
            });

            $_Root.cssRule(rule,  function () {

                iDOM.unshift( arguments[0].ownerNode );
            });

            return iDOM;
        },
        loadCSS:      function ($_View, linkDOM, base) {

            var path = pathToRoot(base, linkDOM.getAttribute('href')),
                _this_ = this,
                $_Style = $('<style disabled />');

            $.get( path ).then(function (CSS) {

                $_Style[0].textContent = CSS;

                $_Style.replaceWith( _this_.fixStyle($_View, $_Style[0], path) );

            },  function () {

                linkDOM.href = path;

                $_Style.replaceWith( linkDOM );
            });

            return $_Style[0];
        },
        fixScript:    function (iDOM) {

            var iAttr = { };

            $.each(iDOM.attributes,  function () {

                iAttr[ this.nodeName ] = this.nodeValue;
            });

            return  $('<script />', iAttr).prop('text', iDOM.text)[0];
        },
        fixURL:       function (base) {

            var key, URI, $_This = $( this );

            if (this.style.cssText.indexOf('url(') > 0)
                $_This.css( mapStyle(this.style,  fixCSSURL.bind(null, base)) );

            switch ( this.tagName.toLowerCase() ) {
                case 'a':         ;
                case 'area':      key = 'href';
                case 'form':      key = key || 'action';
                case 'img':       ;
                case 'iframe':    ;
                case 'audio':     ;
                case 'video':     ;
                case 'script':    key = key || 'src';
                default:          {
                    key = key || 'data-href';

                    if (! (URI = this.getAttribute( key )))  break;

                    if (
                        ('target' in this)  &&
                        (this.target !== '_self')  &&
                        $.isXDomain( URI )
                    )
                        return  this.target = '_blank';

                    if (URI = pathToRoot(base, URI))
                        this.setAttribute(key, URI);

                    if ($_This.is(
                        InnerLink.HTML_Link + ', ' + InnerLink.Self_Link
                    ))
                        new InnerLink( this );
                }
            }
        },
        URL_DOM:      [
            'a', 'area', 'form', 'img', 'iframe', 'audio', 'video', 'script',
            '[style]', '[data-href]'
        ].join(', ')
    };
})(jquery, view_RenderNode, InnerLink);


var view_HTMLView = (function ($, View, DOMkit, RenderNode) {

    /**
     * 普通视图类（对应 JSON 对象）
     *
     * @author  TechQuery
     *
     * @class   HTMLView
     * @extends View
     *
     * @param   {jQueryAcceptable} $_View  - Container DOM of HTMLView
     * @param   {object}           [scope] - Data object as a scope
     * @param   {(string|URL)}     [base]
     *
     * @returns {HTMLView}             Return the last one if a HTMLView instance
     *                                 has been created on this element
     */

    function HTMLView($_View, scope, base) {

        var _This_ = View.call(this, $_View, scope, base);
        /**
         * 本视图的插卡元素
         *
         * @name $_Slot
         * @type {jQuery}
         *
         * @memberof HTMLView
         * @instance
         *
         * @readonly
         */
        this.$_Slot = $();

        return  (_This_ !== this)  ?
            _This_ :
            this.setPrivate( {length: 0,  map: { }} );
    }

    View.extend(HTMLView, {
        is:             function () {

            return  (! $.expr[':'].list( arguments[0] ));
        },
        rawSelector:    $.makeSet('code', 'xmp', 'template'),
        getValue:       function (field) {

            if (field.type !== 'checkbox')
                return  $( field )[('value' in field) ? 'val' : 'html']();

            field = field.form.elements[ field.name ];

            return  $.likeArray( field )  ?
                $.map(field,  function (_This_) {

                    return  _This_.checked ? _This_.value : null;
                })  :  (
                    field.checked ? field.value : ''
                );
        }
    }, {
        indexOf:       Array.prototype.indexOf,
        signIn:        function (node) {

            for (var i = 0;  this[i];  i++)  if (this[i] == node)  return;

            this[this.length++] = node;

            var name = (node instanceof RenderNode)  ?
                    node  :  [node.__name__];

            for (var j = 0;  name[j];  j++)  try {

                this.watch( name[j] ).__map__[name[j]] =
                    (this.__map__[name[j]] || 0)  +  Math.pow(2, i);

            } catch (error) {

                console.warn( error );
            }
        },
        parsePlain:    function (node) {

            if (! (node.nodeValue || node.value))  return;

            var render = new RenderNode( node );

            if (! render.type)  return;

            this.signIn( render );

            if (node.nodeType === 8) {

                render.ownerNode = node =
                    document.createTextNode( node.nodeValue );

                render.DOMType = 'Text';
            }

            return node;
        },
        parseNode:     function (type, node) {

            if ((node instanceof View)  &&  (this.indexOf( node )  <  0))
                return  this.signIn( node );

            switch ($.Type( node )) {
                case 'Text':           ;
                case 'Comment':
                    return  this.parsePlain( node );
                case 'HTMLElement':
                    if (type in HTMLView.rawSelector)
                        return null;
                    else
                        Array.from(
                            $.makeArray( node.attributes ),
                            this.parsePlain,
                            this
                        );
            }
        },
        parseVM:       function () {

            return  this.scan(function (node) {

                var $_View = this.$_View,
                    type = (node.nodeName || '').toLowerCase();

                if ((node instanceof Node)  &&  (node !== $_View[0]))
                    switch ( type ) {
                        case 'style':
                            return  DOMkit.fixStyle($_View, node);
                        case 'link':
                            return  DOMkit.loadCSS($_View, node, this.__base__);
                        case 'script':
                            return  DOMkit.fixScript( node );
                    }

                return  this.parseNode(type, node);
            });
        },
        fixLink:       function () {

            if (! this.__base__)  return;

            var $_Link = this.$_View.find('*');

            if (! this.$_View[0].parentElement)  $_Link = $_Link.addBack();

            $_Link.filter( DOMkit.URL_DOM ).not('head > *').each(
                $.proxy(DOMkit.fixURL, null, this.__base__)
            );
        },
        parseSlot:     function () {

            var _this_ = this, $_Slot = $();

            this.$_View.find('slot').replaceWith(function () {

                var slot = this.getAttribute('name');

                slot = _this_.$_Slot.filter(
                    slot  ?
                        ('[slot="' + slot + '"]')  :
                        function () {
                            return  this.getAttribute &&
                                (! this.getAttribute('slot'));
                        }
                );

                return  slot[0]  ?
                    ($.merge($_Slot, slot)  &&  slot)  :  $( this ).contents();
            });

            this.$_Slot = $_Slot;
        },
        parseHTML:     function (template) {

            var fresh;

            if (template = (template || '').trim()) {

                if ( this.$_View[0].innerHTML.trim() )
                    this.$_Slot = this.$_View.contents().detach();

                if (fresh  =  (! this.$_View[0].innerHTML.trim()))
                    this.$_View[0].innerHTML = template;
            }

            this.$_View.children('template').replaceWith(function () {

                return  $( this ).contents();
            });

            if ( fresh ) {

                this.fixLink();

                this.parseSlot();
            }

            return this;
        },
        /**
         * HTML 模板解析
         *
         * @author TechQuery
         *
         * @memberof HTMLView.prototype
         *
         * @param {string} [template] - A HTML String of the Component's template
         *                              with HTMLSlotElement
         * @return {HTMLView}  Current HTMLView
         */
        parse:         function (template) {

            return  this.parseHTML( template ).parseVM();
        },
        nodeOf:        function (data, exclude, forEach) {

            forEach = (forEach instanceof Function)  &&  forEach;

            var iMask = '0',  _This_ = this;

            for (var iName in data)
                if (this.__map__.hasOwnProperty( iName ))
                    iMask = $.bitOperate('|',  iMask,  this.__map__[ iName ]);

            return $.map(
                iMask.padStart(this.length, 0).split('').reverse(),
                function (bit, node) {

                    node = _This_[ node ];

                    if ((
                        (bit > 0)  ||  ((node || '').type > 1)
                    ) && (
                        !(node instanceof RenderNode)  ||
                        (node.name !== 'value')  ||
                        (node.ownerElement !== exclude)
                    )) {
                        forEach  &&  forEach.call(_This_, node);

                        return node;
                    }
                }
            );
        },
        /**
         * 渲染视图
         *
         * @author   TechQuery
         *
         * @memberof HTMLView.prototype
         *
         * @param    {string|object} data    - Property Key or Data Object
         * @param    {*}             [value] - Property Value
         *
         * @returns  {HTMLView}      Current HTMLView
         */
        render:        function (data, value) {

            var _Data_ = { },  exclude;

            if (data instanceof Element) {

                exclude = data;

                data = exclude.getAttribute('name');

                value = HTMLView.getValue( exclude );
            }

            if (typeof data.valueOf() === 'string') {

                _Data_[data] = value;    data = _Data_;
            }

            _Data_ = this.__data__;

            this.nodeOf(_Data_.commit( data ),  exclude,  function (node) {

                if (node instanceof RenderNode)
                    node.render(this, _Data_);
                else if (node instanceof View) {

                    node.render(_Data_[node.__name__]);

                    _Data_[node.__name__] = node.__data__;
                }
            });

            return this;
        }
    }).registerEvent('template');

//  Render data from user input

    function reRender() {

        var view = HTMLView.instanceOf( this );

        if ( view )  view.render( this );
    }

    $('html').on('change', ':field', reRender).on(
        'input',  ':field',  $.throttle( reRender )
    ).on('reset',  'form',  function () {

        var data = $.paramJSON('?'  +  $( this ).serialize());

        for (var key in data)  data[ key ] = '';

        HTMLView.instanceOf( this ).render( data );
    });

    return HTMLView;

})(jquery, view_View, view_DOMkit, view_RenderNode);


var view_ListView = (function ($, View, InnerLink) {

    /**
     * 迭代视图类（对应 JSON 数组）
     *
     * @description 默认匹配：设置了 `data-name` 属性的 `ul, ol, tbody, select, datalist` 元素
     *
     * @author  TechQuery
     *
     * @class   ListView
     * @extends View
     *
     * @param   {jQueryAcceptable} $_View  - Container DOM of ListView
     * @param   {object}           [scope] - Data object as a scope
     * @param   {(string|URL)}     [base]
     *
     * @returns {ListView}         Return the last one if a ListView instance
     *                             has been created on this element
     */

    function ListView($_View, scope, base) {

        var _This_ = View.call(this, $_View, scope, base);

        return  (_This_ !== this)  ?
            _This_  :
            this.setPrivate({
                HTML:     this.$_View.html(),
                parse:    $.now()
            }).clear();
    }

    View.extend(ListView, {
        is:    $.expr[':'].list
    }, {
        splice:     Array.prototype.splice,
        /**
         * 清空视图
         *
         * @author   TechQuery
         *
         * @memberof ListView.prototype
         *
         * @returns  {ListView} Current ListView
         */
        clear:      function () {

            this.$_View.empty();

            this.splice(0, Infinity);

            return this;
        },
        /**
         * 插入一项
         *
         * @author   TechQuery
         *
         * @memberof ListView.prototype
         *
         * @param    {object}   data      - Data of one Item
         * @param    {number}   [index=0] - Index of Insert Point
         * @param    {boolean}  [delay]   - Create one HTMLView, and not insert
         *
         * @returns  {HTMLView} Newly created Item
         */
        insert:     function (data, index, delay) {

            var Item = View.getSub(this.__HTML__, this.__data__).parse();

            Item.$_View.find( InnerLink.HTML_Link ).addBack( InnerLink.HTML_Link )
                .each(function () {

                    new InnerLink( this );
                });

            data.__index__ = index = index || 0;

            this.splice(index,  0,  Item.render( data ));

            this.__data__.splice(index,  0,  Item.__data__);

            if (! delay)  Item.$_View.insertTo(this.$_View, index);

            return Item;
        },
        /**
         * 渲染视图
         *
         * @author   TechQuery
         *
         * @memberof ListView.prototype
         *
         * @param    {object[]} list    - ArrayLike Object of Data Object
         * @param    {number}   [index] - Insert offset
         *
         * @returns  {ListView} Current ListView
         */
        render:     function (list, index) {

            if (! (index != null))  this.clear();

            index = index || 0;

            if ($.likeArray( list ))
                $(Array.from(list,  function (data, i) {

                    return  this.insert(data, index + i, true).$_View[0];

                },  this)).insertTo(this.$_View, index);

            return this;
        },
        /**
         * 根据 HTML 节点查询索引
         *
         * @author   TechQuery
         *
         * @memberof ListView.prototype
         *
         * @param    {jQueryAcceptable} $_Item - An HTMLElement in one of the List
         *
         * @returns  {number}           Index of $_Item
         */
        indexOf:    function ($_Item) {

            $_Item = ($_Item instanceof $)  ?  $_Item  :  $( $_Item );

            return (
                ($_Item[0].parentNode == this.$_View[0])  ?
                    $_Item  :  $_Item.parentsUntil( this.$_View )
            ).slice( -1 ).index();
        },
        /**
         * 删除一项
         *
         * @author   TechQuery
         *
         * @memberof ListView.prototype
         *
         * @param    {number}   index - Index of Remove Point
         *
         * @returns  {HTMLView} Newly removed Item
         */
        remove:     function (index) {

            var Item = this.splice(
                    $.isNumeric( index )  ?  index  :  this.indexOf( index ),  1
                )[0];

            Item.$_View.remove();

            return Item;
        },
        /**
         * 列表排序
         *
         * @author   TechQuery
         *
         * @memberof ListView.prototype
         *
         * @param    {function} callback - Same as the callback of
         *                                 Array.prototype.sort()
         *
         * @returns  {ListView} Current ListView
         */
        sort:       function (callback) {

            Array.prototype.sort.call(this, callback);

            this.$_View.append($.map(this,  function (Item) {

                Item.__index__ = arguments[1];

                return Item.$_View[0];
            }));

            return this;
        },
        valueOf:    function () {

            return  $.each(this.__data__.valueOf(),  function () {

                delete  this.__index__;
            });
        }
    });

    return ListView;

})(jquery, view_View, InnerLink);


var view_TreeView = (function ($, ListView) {

    /**
     * 树形视图类（对应 JSON 数组 + 对象）
     *
     * @author  TechQuery
     *
     * @class   TreeView
     * @extends ListView
     *
     * @param   {jQueryAcceptable} $_View  - Container DOM of TreeView
     * @param   {object}           [scope] - Data object as a scope
     * @param   {(string|URL)}     [base]
     *
     * @returns {TreeView}             Return the last one if a TreeView instance
     *                                 has been created on this element
     */

    function TreeView($_View, scope, base) {

        $_View = $( $_View );

        this.setPrivate('self',  $_View[0].cloneNode( true ));

        this.__self__.removeAttribute('id');

        $_View.children().append(this.__self__ = this.__self__.outerHTML);

        var _This_ = ListView.call(this, $_View, scope, base);

        if (_This_ !== this)  return _This_;
    }

    /**
     * 平铺数据 转换为 立体数据
     *
     * @author   TechQuery
     *
     * @memberof TreeView
     *
     * @param    {object[]} list               Flat Data of a Tree
     * @param    {string}   [child_key='list'] Key of a Tree Branch in HTML Template
     *
     * @returns  {object[]} 3D Data of a Tree
     */

    TreeView.fromFlat = function (list, child_key) {

        child_key = child_key || 'list';

        var TempMap = { };

        $.each($.extend(true, [ ], list),  function () {

            var _This_ = TempMap[ this.id ];

            _This_ = TempMap[ this.id ] = _This_ ?
                $.extend(this, _This_)  :  this;

            this.pid = this.pid || 0;

            var parent = TempMap[ this.pid ] = TempMap[ this.pid ]  ||  { };

            (parent[ child_key ] = parent[ child_key ]  ||  [ ]).push(_This_);
        });

        return  TempMap[0][ child_key ];
    };

    return  ListView.extend( TreeView );

})(jquery, view_ListView);


var WebApp = (function ($, Observer, View, HTMLView, ListView, TreeView, DOMkit, InnerLink) {

    /**
     * Web 应用（单例）构造函数
     *
     * @author  TechQuery
     *
     * @class   WebApp
     * @extends Observer
     *
     * @param   {jQueryAcceptable}  Page_Box    Container DOM for Inner Page
     * @param   {(string|URL)}      [API_Root]  The Root Path of Back-end API
     *                                          formatted as Absolute URL
     */

    function WebApp(Page_Box, API_Root) {

        if (this instanceof $)
            return  new WebApp(this[0], Page_Box, API_Root);

        var _This_ = WebApp.instanceOf( $('*:webapp') )  ||  this;

        if (_This_ !== this)  return _This_;

        Observer.call(this, Page_Box).pageRoot = new URL( $.filePath() );
        /**
         * 后端 API 根路径
         *
         * @name     apiRoot
         * @type     {URL}
         *
         * @memberof WebApp
         * @instance
         *
         * @readonly
         */
        this.apiRoot = new URL(API_Root || '',  this.pageRoot);

        this.length = 0;

        this.lastPage = -1;

        self.setTimeout( this.listen().boot.bind( this ) );
    }

    function linkOf(URL, part) {

        return this.filter(
            '[href'  +  (part ? '^' : '')  +  '="'  +  URL  +  '"]'
        );
    }

    return  Observer.extend(WebApp, {
        View:        View,
        HTMLView:    HTMLView,
        ListView:    ListView,
        TreeView:    TreeView
    }, {
        splice:           Array.prototype.splice,
        getCID:           function () {

            return  (arguments[0] + '')
                .replace(this.pageRoot, '')
                .replace($.filePath( document.baseURI ),  '')
                .split('#')[0];
        },
        /**
         * 明文显示当前 SPA 内页的路由 URI
         *
         * @author    TechQuery
         *
         * @memberof  WebApp.prototype
         *
         * @returns   {string}  The full route URI of current Inner Page
         *                      in plain text
         */
        getRoute:         function () {
            try {
                return self.atob(
                    (self.location.hash.match(/^\#!(.+)/) || '')[1]  ||  ''
                );
            } catch (error) { }
        },
        _emit:            function (type, link, data) {

            var $_Target = ((link.target === 'page')  ?  this  :  link).$_View;

            var observer = (type in link.__handle__)  ?
                    link  :  View.instanceOf($_Target, false);

            /**
             * 基于链接路由的事件对象
             *
             * @typedef  {object}      RouterEvent
             *
             * @property {string}      type              Event Name
             * @property {HTMLElement} target            Related Element
             * @property {string}      [href]            HTML URI
             * @property {string}      [src]             JSON URI
             * @property {string}      [method="GET"]    HTTP Method of JSON URI
             * @property {string}      [contentType]     MIME Type of request
             * @property {string}      [charset="UTF-8"] CharSet of request
             */

            link = $.extend(link.valueOf(), {
                type:      type,
                target:    $_Target[0]
            });

            data = this.emit(link, data)  ||  data;

            return  observer  ?  (observer.emit(link, data)  ||  data)  :  data;
        },
        emitRoute:        function (link) {

            var $_Nav = $('a[href], area[href]'),  route = this.getRoute();

            var page = route.split('?')[0];

            var path = $.filePath( page )  ||  page,  $_Item;

            ($_Item = linkOf.call($_Nav, route))[0]  ||
            ($_Item = linkOf.call($_Nav, page))[0]  ||
            ($_Item = linkOf.call($_Nav, path, true));

            /**
             * 路由切换事件
             *
             * @event WebApp#route
             *
             * @type  {RouterEvent}
             */

            this._emit('route', link, $_Item);
        },
        switchTo:         function (Index) {

            if (this.lastPage == Index)  return;

            var page = View.instanceOf(this.$_View, false);

            if ( page )  page.detach();

            if (this.lastPage > -1)  this[ this.lastPage ].view = page;

            if (page = (this[ Index ]  ||  '').view) {

                page.attach();

                this.emitRoute( this[ Index ] );

                return page;
            }
        },
        setRoute:         function (link) {

            this.switchTo();

            if (this[ this.lastPage ]  !=  (link + '')) {

                if (++this.lastPage != this.length)
                    this.splice(this.lastPage, Infinity);

                self.history[
                    ((this.getRoute() == link) ? 'replace' : 'push')  +  'State'
                ](
                    {index: this.length},
                    document.title = link.title,
                    this.pageRoot  +  '#!'  +  self.btoa( this.getCID( link ) )
                );

                this.emitRoute( this[ this.length++ ] = link );
            }

            return this;
        },
        loadView:         function (link, HTML) {

            var target = (
                    (link.target === 'page')  ?  this.setRoute( link )  :  link
                ).$_View[0];

            /**
             * 视图模板 加载成功事件
             *
             * @event WebApp#template
             *
             * @type  {RouterEvent}
             */

            HTML = this._emit('template', link, HTML);

            var view = View.getSub(target, null, link.href);

            if ( view.parse )  view.parse( HTML );

            view.$_View.addClass('parsed');

            if (! $('script:not(head > *)', target)[0])
                link.emit('load');

            return view;
        },
        loadChild:        function (view) {

            view.$_View.addClass('rendered');

            return Promise.all($.map(
                view.childOf(':visible'),  this.load.bind( this )
            )).then(function () {

                view.$_View.addClass('loaded');

                return view;
            });
        },
        loadComponent:    function (link, HTML, data) {

            var JS_Load = link.one('load'),  view = this.loadView(link, HTML);

            return  JS_Load.then(function (factory) {

                data = $.extend(
                    data,  link.data,  link.$_View[0].dataset,  data
                );

                return view.render(
                    factory  ?  (factory.call(view, data)  ||  data)  :  data
                );
            }).then( this.loadChild.bind( this ) );
        },
        autoFocus:        function (global) {

            var target = $(
                    'a[href][data-autofocus="true"]',
                    global ? document : this.$_View[0]
                )[0];

            if ( target ) {

                target.click();

                return  this.one({type: 'ready',  target: this.$_View[0]});
            }
        },
        /**
         * 加载一个链接/视图的 DOM 元素或 SPA 对象
         *
         * @author    TechQuery
         *
         * @memberof  WebApp.prototype
         *
         * @param     {HTMLElement|View}  link - an HTML Element or SPA Object of
         *                                       a Link or View
         * @returns   {Promise}
         *
         * @fires     WebApp#request
         * @fires     WebApp#data
         * @fires     WebApp#ready
         */
        load:             function (link) {

            if (! (link instanceof InnerLink))
                link = new InnerLink(
                    (link instanceof Observer)  ?  link.$_View[0]  :  link
                );

            link.$_View.removeClass('parsed rendered loaded');

            var _This_ = this;

            return  link.load(function () {

                if ((this.dataType || '').slice(0, 4)  ===  'json')
                    this.url = (new URL(this.url, _This_.apiRoot))  +  '';

                /**
                 * AJAX 请求发起事件
                 *
                 * @event WebApp#request
                 *
                 * @type  {RouterEvent}
                 */

                _This_._emit('request', link, {
                    option:       this,
                    transport:    arguments[0]
                });

                this.crossDomain = $.isXDomain( this.url );

            }).then(function () {

                var data = arguments[0][1];

                if (data != null) {

                    link.header = data.head;

                    /**
                     * 链接 / 视图 数据加载成功事件
                     *
                     * @event WebApp#data
                     *
                     * @type  {RouterEvent}
                     */

                    data = _This_._emit('data', link, data.body);
                }

                if (link.target !== 'data')
                    return  _This_.loadComponent(link, arguments[0][0], data);

            }).then(function (view) {

                if (! (view instanceof View))  return;

                var promise = view.one('ready');

                /**
                 * 视图加载完成事件
                 *
                 * @event WebApp#ready
                 *
                 * @type  {RouterEvent}
                 */

                _This_._emit('ready', link, view);

                if (link.target === 'page')
                    promise = _This_.autoFocus() || promise;

                return promise;
            });
        },
        /**
         * 按 浏览历史索引 或 路由 URI 加载内页
         *
         * @author    TechQuery
         *
         * @memberof  WebApp.prototype
         *
         * @param     {number|string} [URI=0] - a History Index or Route URI
         * @returns   {Promise}
         *
         * @listens   WebApp#ready
         */
        loadPage:         function (URI) {

            URI = URI || 0;

            if (isNaN( URI ))
                return  this.load( $('<a href="' + URI + '" />')[0] );

            var link = this[+URI + this.lastPage];

            if ( link )  delete link.view;

            if (! URI)  return  this.load( link );

            self.history.go( URI );

            return  this.one({type: 'ready',  target: this.$_View[0]});
        },
        listen:           function () {

            var _This_ = this;

            $('html').on('click submit',  InnerLink.HTML_Link,  function (event) {
                if (
                    ((this.tagName !== 'FORM')  ||  (event.type === 'submit'))  &&
                    ((this.target || '_self')  ===  '_self')  &&
                    _This_.getCID(this.href || this.action)
                ) {
                    event.preventDefault();

                    _This_.load( this );
                }
            });

            $( self ).on('popstate',  function () {

                var state = this.history.state || '',  route = _This_.getRoute();

                var link = _This_[ state.index ];

            //  To reload history pages after the Web App reloading

                if ((! link)  ||  (
                    route  &&  (! state.data)  &&  (route != _This_.getCID( link ))
                ))
                    return  route  &&  _This_.loadPage( route );

                if (_This_.lastPage !== state.index)
                    Promise.resolve(
                        _This_.switchTo( state.index )  ||  _This_.load( link )
                    ).then(function () {

                        _This_.lastPage = state.index;

                        document.title = link.title;
                    });
                else if ( state.data )
                    View.instanceOf(_This_.$_View, false).render( state.data );
            });

            return this;
        },
        prefetch:         function (view) {

            var list = Object.keys($.makeSet.apply($, $.map(
                    view.$_View.find( InnerLink.HTML_Link ),
                    function (link) {

                        link = (link.getAttribute('href') || '').split( /\?|\#/ )[0];

                        return  (link  &&  (! $.isXDomain(link)))  ?  link  :  null;
                    }
                )));

            /**
             * 页面预加载事件
             *
             * @event WebApp#prefetch
             */
            if ( list[0] )  this.emit('prefetch', list);

            return this;
        },
        boot:             function () {

            var root = (new HTMLView('html')).parse().render( $.paramJSON() ),
                _This_ = this;

            this.prefetch( root ).on('ready',  function () {

                this.prefetch( arguments[1] );
            });

            return  this[root.$_View[0].dataset.href ? 'load' : 'loadChild'](
                root
            ).then(function () {

                var Init = _This_.getRoute();

                return  Init ?
                    _This_.loadPage( Init )  :  _This_.autoFocus( true );
            });
        }
    });
})(jquery, base_Observer, view_View, view_HTMLView, view_ListView, view_TreeView, view_DOMkit, InnerLink);


/**
 * EasyWebApp.js - A Light-weight SPA Engine based on jQuery Compatible API
 *
 * @module    {function} WebApp
 *
 * @version   4.0 (2018-01-24) stable
 *
 * @requires  jquery
 * @see       {@link http://jquery.com/ jQuery}
 * @requires  jQueryKit
 * @see       {@link https://techquery.github.io/iQuery.js iQuery}
 *
 * @copyright TechQuery <shiy2008@gmail.com> 2015-2018
 */

return  (function ($, WebApp, InnerLink) {

    /**
     * 承诺对象
     *
     * @typedef {Promise} Promise
     *
     * @see     {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise|Promise}
     */

    /**
     * URL 对象
     *
     * @typedef {URL} URL
     *
     * @see     {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}
     */

    /**
     * DOM 树节点抽象类
     *
     * @typedef {Node} Node
     *
     * @see     {@link https://developer.mozilla.org/en-US/docs/Web/API/Node|Node}
     */

    /**
     * HTML 元素标签抽象类
     *
     * @typedef {HTMLElement} HTMLElement
     *
     * @see     {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement|HTMLElement}
     */

/* ---------- AMD based Component API ---------- */

    var _require_ = self.require,  _script_;

    /**
     * 增强的 require()
     *
     * @global
     * @function require
     *
     * @param {string[]} dependency
     * @param {function} [factory]
     * @param {function} [fallback]
     *
     * @return {Promise}
     *
     * @see {@link https://github.com/amdjs/amdjs-api/wiki/require#requirearray-function-}
     */

    self.require = $.extend(function (dependency, factory, fallback) {

        var script = document.currentScript;

        return  new Promise(function (resolve, reject) {

            var parameter = [
                    dependency,
                    (factory instanceof Function)  ?  factory  :  resolve,
                    (fallback instanceof Function)  ?  fallback  :  reject
                ];

            if (! script)  return _require_.apply(null, parameter);

            _require_.call(this,  parameter[0],  function () {

                _script_ = script;

                return  parameter[1].apply(this, arguments);

            },  parameter[2]);
        });
    },  _require_);

    /**
     * 组件工厂声明
     *
     * @author    TechQuery
     *
     * @memberof  WebApp
     *
     * @param     {function}  factory - The factory function of current
     *                                  component & its data
     * @returns   {function}  WebApp constructor
     */

    WebApp.component = function (factory) {

        var iWebApp = new this(), view = this.View.instanceOf(_script_);

        var link = (view.$_View[0] === iWebApp.$_View[0])  ?
                iWebApp[ iWebApp.lastPage ]  :
                InnerLink.instanceOf( view.$_View );

        if ( link )  link.emit('load', factory);

        return this;
    };

    $.extend(WebApp.prototype, {
        /**
         * 更新路由 URI 的参数数据
         *
         * @author    TechQuery
         *
         * @memberof  WebApp.prototype
         *
         * @param     {string|object}          key      String or
         *                                              Key-Value Object
         * @param     {number|boolean|string}  [value]
         * @returns   {WebApp}
         */
        setURLData:    function (key, value) {

            var URL = this.getRoute().split(/&?data=/);

            if (typeof key === 'string') {

                var name = key;  key = { };

                key[ name ] = value;
            }

            if (!  $.isEqual(key,  $.intersect(key, $.paramJSON( URL[0] ))))
                self.history.pushState(
                    {
                        index:    this.lastPage,
                        data:     key
                    },
                    document.title,
                    this.pageRoot + '#!' + self.btoa(
                        $.extendURL(URL[0], key)  +  (
                            URL[1]  ?  ('&data=' + URL[1])  :  ''
                        )
                    )
                );

            return this;
        }
    });

/* ---------- jQuery based Helper API ---------- */

    /**
     * jQuery 对象
     *
     * @typedef {jQuery} jQuery
     *
     * @see     {@link https://api.jquery.com/jQuery|jQuery}
     */

    /**
     * jQuery 构造函数 第一参数接受的数据类型
     *
     * @typedef {(string|HTMLElement|HTMLElement[]|jQuery)} jQueryAcceptable
     *
     * @see     {@link https://api.jquery.com/jQuery|jQuery Acceptable}
     */

    /**
     * jQuery 插件命名空间
     *
     * @external "jQuery.fn"
     *
     * @see      {@link http://learn.jquery.com/plugins/|jQuery Plugins}
     */

    /**
     * 在 jQuery 对象首个元素上创建/获取视图对象
     *
     * @author    TechQuery
     *
     * @function  external:"jQuery.fn".view
     *
     * @param     {string}  [Class_Name] - String for creating,
     *                                     or empty for getting
     * @returns   {View}
     */

    $.fn.view = function (Class_Name) {

        if (! this[0])  return;

        return  Class_Name  ?
            (new WebApp[Class_Name](this[0], arguments[1]))  :
            WebApp.View.instanceOf(this[0], false);
    };

    /**
     * 在 jQuery 对象首个元素上创建/获取 Web 应用对象
     *
     * @author   TechQuery
     *
     * @function external:"jQuery.fn".iWebApp
     *
     * @param    {(string|URL)}  [API_Root] - The Root Path of Back-end API
     *                                        formatted as Absolute URL
     * @returns  {WebApp}
     */

    return  $.fn.iWebApp = WebApp;

})(jquery, WebApp, InnerLink);
});