//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('jQueryKit',  ['jquery'],  factory);
    else if (typeof module === 'object')
        module.exports = factory(require('jquery'));
    else
        this.jQueryKit = factory(this['jquery']);

})(function (jquery) {


var polyfill_ES_API = (function () {

    /* ----- Object Patch ----- */

    if (! Object.keys)
        Object.keys = function (iObject) {
            var iKey = [ ];

            for (var _Key_ in iObject)
                if ( this.prototype.hasOwnProperty.call(iObject, _Key_) )
                    iKey.push(_Key_);

            return iKey;
        };

    Object.getPrototypeOf = Object.getPrototypeOf  ||  function (object) {

        if (! (object != null))
            throw TypeError('Cannot convert undefined or null to object');

        if ( object.__proto__ )  return object.__proto__;

        if (! Object.prototype.hasOwnProperty.call(object, 'constructor'))
            return object.constructor.prototype;

        var constructor = object.constructor;

        try {  delete object.constructor;  } catch (error) { }

        var prototype = object.constructor.prototype;

        try {  object.constructor = constructor;  } catch (error) { }

        return prototype;
    };

    Object.create = Object.create  ||  function (iProto, iProperty) {

        if (typeof iProto != 'object')
            throw TypeError('Object prototype may only be an Object or null');

        function iTemp() { }

        iTemp.prototype = iProto;

        var iObject = new iTemp();

        iObject.__proto__ = iProto;

        for (var iKey in iProperty)
            if (
                this.prototype.hasOwnProperty.call(iProperty, iKey)  &&
                (iProperty[iKey].value !== undefined)
            )
                iObject[iKey] = iProperty[iKey].value;

        return iObject;
    };

    /* ----- Number Patch ----- */

    Number.isInteger = Number.isInteger  ||  function (value) {

        return  (typeof value === 'number')  &&  isFinite( value )  &&
            (Math.floor(value) === value);
    };

    Number.MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

    Number.MIN_SAFE_INTEGER = -Number.MAX_SAFE_INTEGER;

    Number.isSafeInteger = Number.isSafeInteger  ||  function (value) {

       return  this.isInteger( value )  &&  (
           Math.abs( value )  <=  this.MAX_SAFE_INTEGER
       );
    };

    /* ----- String Extension ----- */

    var _Trim_ = ''.trim;

    var Blank_Char = (! _Trim_)  &&  /(^\s*)|(\s*$)/g;

    String.prototype.trim = function (iChar) {
        if (! iChar)
            return  _Trim_  ?  _Trim_.call(this)  :  this.replace(Blank_Char, '');

        var iFrom = 0,  iTo;

        for (var i = 0;  iChar[i];  i++) {
            if ((! iFrom)  &&  (this[0] == iChar[i]))
                iFrom = 1;

            if ((! iTo)  &&  (this[this.length - 1] == iChar[i]))
                iTo = -1;

            if (iFrom && iTo)  break;
        }

        return  this.slice(iFrom, iTo);
    };

    String.prototype.repeat = String.prototype.repeat  ||  function (Times) {

        return  (new Array(Times + 1)).join(this);
    };

    'padStart:0,padEnd:1'.replace(/(\w+):(\d)/g,  function (_, key, index) {

        String.prototype[ key ] =
            String.prototype[ key ]  ||  function (length, pad) {

                length = length >> 0;    pad = pad  ?  (pad + '')  :  ' ';

                if (this.length >= length)  return this + '';

                pad = pad.repeat(
                    Math.ceil((length -= this.length)  /  pad.length)
                ).slice( length );

                return  +index  ?  (this + pad)  :  (pad + this);
            };
    });

    /* ----- Array Patch ----- */

    var ArrayProto = Array.prototype;

    function Array_push(value, mapCall, mapContext) {

        return  ArrayProto.push.call(
            this,
            (mapCall instanceof Function)  ?
                mapCall.call(mapContext, value, this.length)  :  value
        );
    }

    Array.from = Array.from  ||  function (iterator) {

        var array, _This_;

        try {
            array = new this();
        } catch (error) {
            array = Object.create( this.prototype );
        }

        if (Number.isInteger( iterator.length )) {

            for (var i = 0, length = iterator.length;  i < length;  i++)
                Array_push.call(array, iterator[i], arguments[1], arguments[2]);

            return array;
        }

        if (iterator.next instanceof Function) {

            while ((_This_ = iterator.next()).done  ===  false)
                Array_push.call(array, _This_.value, arguments[1], arguments[2]);

            return array;
        }

        throw  TypeError('Cannot convert undefined or null to object');
    };

    ArrayProto.indexOf = ArrayProto.indexOf  ||  function () {

        for (var i = 0;  i < this.length;  i++)
            if (arguments[0] === this[i])
                return i;

        return -1;
    };

    ArrayProto.reduce = ArrayProto.reduce  ||  function (callback, value) {

        for (var i = 1, length = this.length;  i < length;  i++) {

            if (i == 1)  value = this[0];

            value = callback(value, this[i], i, this);
        }

        return value;
    };

    /* ----- Function Patch ----- */

    function FuncName() {
        return  (this.toString().trim().match(/^function\s+([^\(\s]*)/) || '')[1];
    }

    if (! ('name' in Function.prototype)) {

        if (document.documentMode > 8)
            Object.defineProperty(Function.prototype,  'name',  {get: FuncName});
        else
            Function.prototype.name = FuncName;
    }

    /* ----- Date Patch ----- */

    Date.now = Date.now  ||  function () { return  +(new Date()); };

})();


var object_ext_base = (function ($) {

    $ = $ || { };

    $.likeArray = function (iObject) {

        if ((! iObject)  ||  (typeof iObject != 'object'))
            return false;

        iObject = (typeof iObject.valueOf == 'function')  ?
            iObject.valueOf() : iObject;

        return Boolean(
            iObject  &&
            (typeof iObject.length == 'number')  &&
            (typeof iObject != 'string')
        );
    };

    $.makeSet = function () {

        var iArgs = arguments,  iValue = true,  iSet = { };

        if (this.likeArray( iArgs[1] )) {

            iValue = iArgs[0];

            iArgs = iArgs[1];

        } else if (this.likeArray( iArgs[0] )) {

            iValue = iArgs[1];

            iArgs = iArgs[0];
        }

        for (var i = 0;  i < iArgs.length;  i++)
            iSet[ iArgs[i] ] = (typeof iValue != 'function')  ?
                iValue  :  iValue(iArgs[i], i, iArgs);

        return iSet;
    };

    var WindowType = $.makeSet('Window', 'DOMWindow', 'global');

    $.Type = function (iVar) {
        try {
            var iType = Object.prototype.toString.call( iVar ).slice(8, -1);

            var iName = iVar.constructor.name;

            iName = (typeof iName == 'function')  ?
                iName.call( iVar.constructor )  :  iName;

            if ((iType == 'Object')  &&  iName)  iType = iName;
        } catch (iError) {
            return 'Window';
        }

        if (! iVar)
            return  (isNaN(iVar)  &&  (iVar !== iVar))  ?  'NaN'  :  iType;

        if (WindowType[iType] || (
            (iVar == iVar.document) && (iVar.document != iVar)    //  IE 9- Hack
        ))
            return 'Window';

        if (iVar.location  &&  (iVar.location === (
            iVar.defaultView || iVar.parentWindow || { }
        ).location))
            return 'Document';

        if (
            iType.match(/HTML\w+?Element$/) ||
            (typeof iVar.tagName == 'string')
        )
            return 'HTMLElement';

        if (this.likeArray( iVar )) {
            iType = 'Array';
            try {
                iVar.item();
                try {
                    iVar.namedItem();

                    return 'HTMLCollection';

                } catch (iError) {

                    return 'NodeList';
                }
            } catch (iError) { }
        }

        return iType;
    };

    $.isEqual = function isEqual(iLeft, iRight, iDepth) {

        iDepth = iDepth || 1;

        if (!  (iLeft && iRight))
            return  (iLeft === iRight);

        iLeft = iLeft.valueOf();  iRight = iRight.valueOf();

        if ((typeof iLeft != 'object')  ||  (typeof iRight != 'object'))
            return  (iLeft === iRight);

        var Left_Key = Object.keys( iLeft ),
            Right_Key = Object.keys( iRight );

        if (Left_Key.length != Right_Key.length)  return false;

        Left_Key.sort();  Right_Key.sort();  --iDepth;

        for (var i = 0, _Key_;  i < Left_Key.length;  i++) {

            _Key_ = Left_Key[i];

            if (_Key_ != Right_Key[i])  return false;

            if (! iDepth) {
                if (iLeft[_Key_] !== iRight[_Key_])  return false;
            } else {
                if (! isEqual.call(
                    this, iLeft[_Key_], iRight[_Key_], iDepth
                ))
                    return false;
            }
        }
        return true;
    };

    $.trace = function (iObject, iName, iCount, iCallback) {

        if (iCount instanceof Function)  iCallback = iCount;

        iCount = parseInt( iCount );

        iCount = isNaN( iCount )  ?  Infinity  :  iCount;

        var iResult = [ ];

        for (
            var _Next_,  i = 0,  j = 0;
            iObject[iName]  &&  (j < iCount);
            iObject = _Next_,  i++
        ) {
            _Next_ = iObject[iName];
            if (
                (typeof iCallback != 'function')  ||
                (iCallback.call(_Next_, i, _Next_)  !==  false)
            )
                iResult[j++] = _Next_;
        }

        return iResult;
    };

    $.makeIterator = function (array) {

        var nextIndex = 0;

        return {
            next:    function () {

                return  (nextIndex >= array.length)  ?
                    {done: true}  :  {done: false,  value: array[nextIndex++]};
            }
        };
    };

    return $;

})(jquery);


var utility_ext_timer = (function ($) {

    var _Timer_ = { };

    return $.extend({
        every:       function (iSecond, iCallback) {

            var iTimeOut = (iSecond || 0.01)  *  1000,
                iStart = Date.now(),
                Index = 0;

            return  setTimeout(function loop() {

                if (false !== iCallback(
                    ++Index,  (Date.now() - iStart)  /  1000
                ))
                    setTimeout(loop, iTimeOut);
            }, iTimeOut);
        },
        wait:        function (iSecond, iCallback) {

            return  this.every(iSecond,  function () {

                iCallback.apply(this, arguments);

                return false;
            });
        },
        start:       function (iName) {

            return  (_Timer_[iName] = Date.now());
        },
        end:         function (iName) {

            return  (Date.now() - _Timer_[iName])  /  1000;
        },
        throttle:    function (iSecond, iOrigin) {

            if (! $.isNumeric( iSecond )) {
                iOrigin = iSecond;
                iSecond = 0;
            }
            iSecond = (iSecond || 0.25)  *  1000;

            var Last_Exec = 0;

            return  function () {

                var iNow = Date.now();

                if (Last_Exec + iSecond  <=  iNow) {
                    Last_Exec = iNow;

                    return  iOrigin.apply(this, arguments);
                }
            };
        },
        uuid:        function () {

            return  (arguments[0] || 'uuid')  +  '_'  +
                (Date.now() + Math.random()).toString(36)
                    .replace('.', '').toUpperCase();
        }
    });
})(jquery);


var CSS_ext_var = (function ($) {

    return  $.extend(true, {
        fn:       {uniqueId:  function () {

            return  $.each(this,  function () {

                if (! this.id)  this.id = $.uuid('iQuery');
            })
        }},
        cssPX:    $.makeSet(
            'width', 'height', 'padding', 'border-radius', 'margin',
            'top', 'right', 'bottom',  'left'
        )
    });
})(jquery);


(function ($) {

    var UA = self.navigator.userAgent;

    var is_Trident = UA.match(
            /MSIE (\d+)|Trident[^\)]+rv:(\d+)|Edge\/(\d+)\./i
        ),
        is_Gecko = UA.match(
            /; rv:(\d+)[^\/]+Gecko\/\d+/
        ),
        is_Webkit = UA.match(
            /AppleWebkit\/(\d+\.\d+)/i
        );

    var IE_Ver = is_Trident  ?  Number(is_Trident[1] || is_Trident[2])  :  NaN,
        FF_Ver = is_Gecko  ?  Number( is_Gecko[1] )  :  NaN,
        WK_Ver = is_Webkit  ?  parseFloat( is_Webkit[1] )  :  NaN;

    var is_Pad = UA.match(/Tablet|Pad|Book|Android 3/i),
        is_Phone = UA.match(/Phone|Touch|Android 2|Symbian/i);

    var is_Mobile = (is_Pad || is_Phone || UA.match(/Mobile/i))  &&
            (UA.indexOf(' PC ') === -1);

    var is_iOS = UA.match(
            /(iTouch|iPhone|iPad|iWatch);[^\)]+CPU[^\)]+OS (\d+_\d+)/i
        ),
        is_Android = UA.match( /(Android |Silk\/)(\d+\.\d+)/i );

    $.browser = {
        msie:             IE_Ver,
        mozilla:          FF_Ver,
        webkit:           WK_Ver,
        modern:           !  (IE_Ver < 9),
        mobile:           !! is_Mobile,
        pad:              !! is_Pad,
        phone:            (!! is_Phone)  ||  (is_Mobile  &&  (! is_Pad)),
        ios:              is_iOS  ?  parseFloat( is_iOS[2].replace('_', '.') )  :  NaN,
        android:          is_Android  ?  parseFloat( is_Android[2] )  :  NaN,
        versionNumber:    IE_Ver || FF_Ver || WK_Ver
    };

})(jquery);


var utility_ext_string = (function ($) {

    return $.extend({
        split:         function (iString, iSplit, iLimit, iJoin) {

            iString = iString.split(iSplit);

            if (iLimit) {
                iString[iLimit - 1] = iString.slice(iLimit - 1).join(
                    (typeof iJoin == 'string') ? iJoin : iSplit
                );
                iString.length = iLimit;
            }

            return iString;
        },
        hyphenCase:    function () {
            return  arguments[0].replace(/([a-z0-9])[\s_]?([A-Z])/g,  function () {

                return  arguments[1] + '-' + arguments[2].toLowerCase();
            });
        },
        byteLength:    function () {

            return arguments[0].replace(
                /[^\u0021-\u007e\uff61-\uffef]/g,  'xx'
            ).length;
        },
        isSelector:    function () {
            try {
                return  (!! $( arguments[0] ));

            } catch (iError) {  return false;  }
        }
    });
})(jquery);


(function ($) {

    var BOM = self,  DOM = self.document;

    if ( $.browser.modern )  return;


/* ---------- Document ShortCut ---------- */

    DOM.defaultView = DOM.parentWindow;

    DOM.head = DOM.documentElement.firstChild;


/* ---------- DOM ShortCut ---------- */

    var DOM_Proto = Element.prototype,
        Text_Proto = Object.getPrototypeOf( DOM.createTextNode('') );

    $.each({
        firstElementChild:         function () {
            return this.children[0];
        },
        lastElementChild:          function () {

            return  this.children[this.children.length - 1];
        },
        previousElementSibling:    function () {

            return  $.trace(this,  'previousSibling',  1,  function () {

                return  (this.nodeType == 1);
            })[0];
        },
        nextElementSibling:        function () {

            return  $.trace(this,  'nextSibling',  function () {

                return  (this.nodeType == 1);
            })[0];
        }
    },  function (key) {

        var config = {get: this};

        Object.defineProperty(DOM_Proto, key, config);

        if (key.indexOf('Sibling') > 0)
            Object.defineProperty(Text_Proto, key, config);
    });

/* ---------- DOM Text Content ---------- */

    Object.defineProperty(DOM_Proto, 'textContent', {
        get:    function () {

            return this.innerText;
        },
        set:    function (iText) {

            switch ( this.tagName.toLowerCase() ) {
                case 'style':     return  this.styleSheet.cssText = iText;
                case 'script':    return  this.text = iText;
            }
            this.innerText = iText;
        }
    });

/* ---------- DOM Attribute Name ---------- */

    var iAlias = {
            'class':    'className',
            'for':      'htmlFor'
        },
        Get_Attribute = DOM_Proto.getAttribute,
        Set_Attribute = DOM_Proto.setAttribute,
        Remove_Attribute = DOM_Proto.removeAttribute;

    $.extend(DOM_Proto, {
        getAttribute:    function (iName) {

            return  iAlias[iName] ?
                this[ iAlias[iName] ]  :  Get_Attribute.call(this, iName,  0);
        },
        setAttribute:    function (iName, iValue) {

            if (iAlias[iName])
                this[ iAlias[iName] ] = iValue;
            else
                Set_Attribute.call(this, iName, iValue,  0);
        },
        removeAttribute:    function (iName) {

            return  Remove_Attribute.call(this,  iAlias[iName] || iName,  0);
        }
    });

/* ---------- Computed Style ---------- */

    var PX_Attr = $.makeSet('left', 'right', 'top', 'bottom', 'width', 'height'),
        DX_Filter = 'DXImageTransform.Microsoft.';

    function ValueUnit(iValue) {

        return  iValue.slice((parseFloat(iValue) + '').length);
    }

    function toPX(iName) {

        var iValue = this[iName];    var iNumber = parseFloat( iValue );

        if (isNaN( iNumber ))  return;

        if ( iNumber )
            switch (ValueUnit( iValue )) {
                case 'em':    {
                    var Font_Size =
                        this.ownerNode.parentNode.currentStyle.fontSize;

                    iNumber *= parseFloat( Font_Size );

                    if (ValueUnit( Font_Size )  !=  'pt')  break;
                }
                case 'pt':    iNumber *= (BOM.screen.deviceXDPI / 72);    break;
                default:      return;
            }

        this[iName] = iNumber + 'px';
    }

    function CSSStyleDeclaration(iDOM) {

        var iStyle = iDOM.currentStyle;

        $.extend(this, {
            length:       0,
            cssText:      '',
            ownerNode:    iDOM
        });

        for (var iName in iStyle) {

            this[iName] = (iName in PX_Attr)  &&  iStyle[
                $.camelCase('pixel-' + iName)
            ];

            this[iName] = (typeof this[iName] === 'number')  ?
                (this[iName] + 'px')  :  (iStyle[iName] + '');

            if (typeof this[iName] === 'string')  toPX.call(this, iName);

            this.cssText += [iName,  ': ',  this[ iName ],  '; '].join('');
        }

        this.cssText = this.cssText.trim();

        var iAlpha = iDOM.filters.Alpha  ||  iDOM.filters[DX_Filter + 'Alpha'];

        this.opacity = (iAlpha  ?  (iAlpha.opacity / 100)  :  1)  +  '';
    }

    CSSStyleDeclaration.prototype.getPropertyValue = function () {

        return  this[$.camelCase( arguments[0] )];
    };

    BOM.getComputedStyle = function () {

        return  new CSSStyleDeclaration( arguments[0] );
    };

/* ---------- Set Style ---------- */

    function toHexInt(iDec, iLength) {

        return  parseInt( Number(iDec).toFixed(0) ).toString(16).padStart(
            iLength || 2,  0
        );
    }

    function RGB_Hex(iRed, iGreen, iBlue) {

        var iArgs = $.makeArray( arguments );

        if ((iArgs.length < 2)  &&  (typeof iArgs[0] === 'string'))
            iArgs = iArgs[0].replace(/rgb\(([^\)]+)\)/i, '$1')
                .replace(/,\s*/g, ',').split(',');

        for (var i = 0;  i < 3;  i++)  iArgs[i] = toHexInt( iArgs[i] );

        return iArgs.join('');
    }

    Object.getPrototypeOf( DOM.documentElement.style ).setProperty =
        function setProperty(iName, iValue) {

            var iString = '',  iWrapper,  iScale = 1,  iConvert;

            var iRGBA = (typeof iValue === 'string')  &&
                    iValue.match( /\s*rgba\(([^\)]+),\s*(\d\.\d+)\)/i );

            if (iName === 'opacity') {

                iName = 'filter',  iScale = 100;

                iWrapper = 'progid:' + DX_Filter + 'Alpha(opacity={n})';

            } else if ( iRGBA ) {

                iString = iValue.replace(iRGBA[0], '');

                if ( iString )
                    iString += setProperty.call(this, iName, iString);

                if (iName != 'background')
                    iString += setProperty.apply(this, [
                        (iName.indexOf('-color') > -1) ? iName : (iName + '-color'),
                        'rgb(' + iRGBA[1] + ')'
                    ]);

                iName = 'filter';

                iWrapper = 'progid:' + DX_Filter +
                    'Gradient(startColorStr=#{n},endColorStr=#{n})';

                iConvert = function (iAlpha, iRGB) {

                    return  toHexInt(parseFloat(iAlpha) * 256)  +  RGB_Hex( iRGB );
                };
            }

            if ( iWrapper )
                iValue = iWrapper.replace(
                    /\{n\}/g,
                    iConvert  ?  iConvert(iRGBA[2], iRGBA[1])  :  (iValue * iScale)
                );

            this.setAttribute(iName, iValue, arguments[2]);
        };

/* ---------- DOM Event ---------- */

    var KeyMap = {X: 'Left',  Y: 'Top'};

    function pageCoord(key) {

        key = key.slice( -1 );

        var name = 'scroll'  +  KeyMap[ key ];

        return  this['client' + key]  +  Math.max(
            document.documentElement[ name ],  document.body[ name ]
        );
    }

    var Event_Property = {
            target:    'srcElement',
            which:     function () {

                return  (this.type.slice(0, 3) === 'key')  ?
                    this.keyCode  :  [0, 1, 3, 0, 2, 0, 0, 0][ this.button ];
            },
            pageX:     pageCoord,
            pageY:     pageCoord
        };

    $.extend(Event.prototype, {
        preventDefault:     function () {

            this.returnValue = false;
        },
        stopPropagation:    function () {

            this.cancelBubble = true;
        },
        valueOf:            function () {
            var event = { };

            for (var key in this) {

                switch ($.Type( this[key] )) {
                    case 'Window':         ;
                    case 'Document':       ;
                    case 'HTMLElement':    if (Event_Property[ key ])  break;
                    case 'Function':       ;
                    default:               if (! Event_Property[ key ])  continue;
                }

                event[ type ] = (Event_Property[ key ]  instanceof  Function)  ?
                    Event_Property[ key ].call(this, key)  :
                    this[ Event_Property[ key ] ];
            }

            return event;
        }
    });

/* ---------- XML DOM Parser ---------- */

    var IE_DOMParser = (function () {

            for (var i = 0;  arguments[i];  i++)  try {

                return  new ActiveXObject( arguments[i] )  &&  arguments[i];

            } catch (iError) { }
        })(
            'MSXML2.DOMDocument.6.0', 'MSXML2.DOMDocument.5.0',
            'MSXML2.DOMDocument.4.0', 'MSXML2.DOMDocument.3.0',
            'MSXML2.DOMDocument',     'Microsoft.XMLDOM'
        );

    function XML_Create() {

        var iXML = new ActiveXObject( IE_DOMParser );

        iXML.async = false;

        iXML.loadXML( arguments[0] );

        return iXML;
    }

    BOM.DOMParser = function () { };

    BOM.DOMParser.prototype.parseFromString = function () {

        var iXML = XML_Create( arguments[0] );

        if ( iXML.parseError.errorCode )
            iXML = XML_Create([
                '<xml><parsererror><h3>This page contains the following errors:</h3><div>',
                iXML.parseError.reason,
                '</div></parsererror></xml>'
            ].join(''));

        return iXML;
    };

})(jquery);


var object_ext_Class = (function ($) {

    function Class(abstract, method) {

        abstract = abstract || Class;

        var _class_ = (Class.name instanceof Function)  ?
                abstract.name()  :  abstract.name;

        if (abstract.prototype  ===  Object.getPrototypeOf( this ))
            throw TypeError(
                'Abstract class ' + _class_ + " can't be instantiated"
            );

        if (abstract !== Class)
            Array.from(method,  function (name) {

                this[ name ] = this[ name ]  ||  function () {

                    throw TypeError(
                        'Abstract method ' +
                        _class_ + '.prototype.' + name +
                        " isn't implemented"
                    );
                };
            },  this);

        return this;
    }

    $.extend(Class, {
        extend:        function (sub, static, proto) {

            for (var key in this)
                if (this.hasOwnProperty( key ))  sub[ key ] = this[ key ];

            $.extend(sub, static);

            sub.prototype = $.extend(
                Object.create( this.prototype ),  sub.prototype,  proto
            );
            sub.prototype.constructor = sub;

            return sub;
        },
        enumerable:    (!! $.browser.modern)
    });

    function safeWrap(method, failback) {

        var _method_ = function (key, value) {
                try {
                    method.apply(this, arguments);

                } catch (error) {
                    if (
                        error.message.split('.')[0] ===
                            'Invalid property descriptor'
                    )
                        throw error;

                    if (failback !== false)  this[error.key || key] = value;
                }

                return value;
            };

        return  function (key) {

            key = key.valueOf();

            if (! $.isPlainObject( key ))
                return  _method_.apply(this, arguments);

            for (var name in key)  _method_.call(this,  name,  key[ name ]);

            return this;
        };
    }

    var setPrivate = safeWrap(function (key, value, config) {

            key = (
                (key === 'length')  ||  Number.isInteger( +key )  ||  (
                    (typeof value === 'function')  &&
                    this.hasOwnProperty('constructor')
                )
            )  ?  key  :  ('__' + key + '__');

            try {
                Object.defineProperty(this, key, $.extend(
                    {
                        value:           value,
                        writable:        true,
                        configurable:    true
                    },
                    config || { }
                ));
            } catch (error) {

                error.key = key;    throw error;
            }
        });

    setPrivate.call(Class.prototype, 'setPrivate', setPrivate);

    setPrivate.call(
        Class.prototype,  'setPublic',  safeWrap(function (key, Get_Set, config) {

            Object.defineProperty(this, key, $.extend(
                {
                    enumerable:      Class.enumerable,
                    configurable:    true
                },
                config,
                Get_Set
            ));
        },  false)
    );

    return  $.Class = Class;

})(jquery);


(function ($, Class) {

    var BOM = self;

/* ---------- URL Search Parameter ---------- */

    function URLSearchParams() {

        this.setPrivate('length', 0);

        var search = arguments[0] || '';

        if (search instanceof Array) {

            for (var i = 0;  arguments[i];  i++)
                this.append.apply(this, arguments[i]);

            return;
        }

        var _This_ = this;

        search.replace(/([^\?&=]+)=([^&]+)/g,  function (_, key, value) {

            try {  value = decodeURIComponent( value );  } catch (error) { }

            _This_.append(key, value);
        });
    }

    Class.extend(URLSearchParams, null, {
        append:      function (key, value) {

            this.setPrivate(this.length++,  [key,  value + '']);
        },
        get:         function (key) {

            for (var i = 0;  this[i];  i++)
                if (this[i][0] === key)  return this[i][1];
        },
        getAll:      function (key) {

            return  $.map(this,  function (_This_) {

                if (_This_[0] === key)  return _This_[1];
            });
        },
        'delete':    function (key) {

            for (var i = 0;  this[i];  i++)
                if (this[i][0] === key)  Array.prototype.splice.call(this, i, 1);
        },
        set:         function (key, value) {

            if (this.get( key )  != null)  this['delete']( key );

            this.append(key, value);
        },
        toString:    function () {

            return  encodeURIComponent(Array.from(this,  function (_This_) {

                return  _This_[0] + '=' + _This_[1];

            }).join('&'));
        },
        entries:     function () {

            return  $.makeIterator( this );
        }
    });

    BOM.URLSearchParams = BOM.URLSearchParams || URLSearchParams;

    BOM.URLSearchParams.prototype.sort =
        BOM.URLSearchParams.prototype.sort  ||  function () {

            var entry = Array.from( this.entries() ).sort(function (A, B) {

                    return  A[0].localeCompare( B[0] )  ||
                        A[1].localeCompare( B[1] );
                });

            for (var i = 0;  entry[i];  i++)  this['delete']( entry[i][0] );

            for (var i = 0;  entry[i];  i++)
                this.append(entry[i][0], entry[i][1]);
        };

/* ---------- URL Constructor ---------- */

    BOM.URL = BOM.URL || BOM.webkitURL;

    if (typeof BOM.URL === 'function')  return;


    var Origin_RE = /^\w+:\/\/.{2,}/;


    function URL(path, base) {

        var link = this.setPrivate('data',  $('<div><a /></div>')[0].firstChild);

        link.href = Origin_RE.test( path )  ?  path  :  base;

        if (! Origin_RE.test( link.href ))
            throw  new TypeError(
                "Failed to construct 'URL': Invalid " +
                (base ? 'base' : '')  +  ' URL'
            );

        if (link.href == base)
            link.href = link.origin + (
                (path[0] === '/')  ?
                    path  :  link.pathname.replace(/[^\/]*$/, path)
            );

        return  $.browser.modern ? this : link;
    }

    Class.extend(URL, null, {
        toString:    function () {  return this.href;  }
    });

    $.each([
        BOM.location.constructor, BOM.HTMLAnchorElement, BOM.HTMLAreaElement
    ],  function () {

        Object.defineProperty(this.prototype, 'origin', {
            get:           function () {

                return  this.protocol + '//' + this.hostname + (
                    ((! this.port) || (this.port == 80))  ?
                        ''  :  (':' + this.port)
                );
            },
            enumerable:    Class.enumerable,
        });

        Object.defineProperty(this.prototype, 'searchParams', {
            get:           function () {

                return  new URLSearchParams( this.search );
            },
            enumerable:    Class.enumerable,
        });
    });

    if ( $.browser.modern )
        $.each(BOM.location,  function (key) {

            if (typeof this !== 'function')
                Object.defineProperty(URL.prototype, key, {
                    get:             function () {

                        return  this.__data__[key];
                    },
                    set:             (key === 'origin')  ?
                        undefined  :  function () {

                            this.__data__[key] = arguments[0];
                        },
                    enumerable:      Class.enumerable,
                    configurable:    true
                });
        });

    if ( BOM.URL ) {

        URL.createObjectURL = BOM.URL.createObjectURL;

        URL.revokeObjectURL = BOM.URL.revokeObjectURL;
    }

    BOM.URL = URL;

})(jquery, object_ext_Class);


(function ($) {

    var BOM = self,  DOM = self.document,  enumerable = $.Class.enumerable;

/* ---------- Document Current Script ---------- */

    var Stack_Prefix = {
            webkit:     'at ',
            mozilla:    '@',
            msie:       'at Global code \\('
        };

    function Script_URL() {

        try {  throw  new Error('AMD_Loader');  } catch (iError) {

            var iURL;

            for (var iCore in Stack_Prefix)
                if ($.browser[ iCore ]) {

                    iURL = iError.stack.match(RegExp(
                        "\\s+"  +  Stack_Prefix[ iCore ]  +
                            "(http(s)?:\\/\\/[^:]+)"
                    ));

                    return  iURL && iURL[1];
                }
        }
    }

    if (! ('currentScript' in DOM))
        Object.defineProperty(Object.getPrototypeOf( DOM ),  'currentScript',  {
            get:           function () {

                var iURL = ($.browser.msie < 10)  ||  Script_URL();

                for (var i = 0;  DOM.scripts[i];  i++)
                    if ((iURL === true)  ?
                        (DOM.scripts[i].readyState == 'interactive')  :
                        (DOM.scripts[i].src == iURL)
                    )
                        return DOM.scripts[i];
            },
            enumerable:    enumerable
        });

/* ---------- ParentNode Children ---------- */

    function HTMLCollection(DOM_Array) {

        for (var i = 0, j = 0;  DOM_Array[i];  i++)
            if (DOM_Array[i].nodeType === 1) {

                this[j] = DOM_Array[i];

                if ( this[j++].name )  this[this[j - 1].name] = this[j - 1];
            }

        this.length = j;
    }

    HTMLCollection.prototype.item = HTMLCollection.prototype.namedItem =
        function () {
            return  this[ arguments[0] ]  ||  null;
        };

    var Children_Define = {
            get:           function () {

                return  new HTMLCollection( this.childNodes );
            },
            enumerable:    enumerable
        };

    if (! DOM.createDocumentFragment().children)
        Object.defineProperty(
            ($.browser.modern ? DocumentFragment : DOM.constructor).prototype,
            'children',
            Children_Define
        );

    if (! DOM.head.children[0])
        Object.defineProperty(DOM_Proto, 'children', Children_Define);


/* ---------- Scrolling Element ---------- */

    if (! ('scrollingElement' in DOM))
        Object.defineProperty(DOM, 'scrollingElement', {
            get:           function () {

                return  ($.browser.webkit || (DOM.compatMode == 'BackCompat'))  ?
                    DOM.body  :  DOM.documentElement;
            },
            enumerable:    enumerable
        });

/* ---------- Selected Options ---------- */

    if ($.browser.msie < 12)
        Object.defineProperty(HTMLSelectElement.prototype, 'selectedOptions', {
            get:    function () {
                return  new HTMLCollection(
                    $.map(this.options,  function (iOption) {

                        return  iOption.selected ? iOption : null;
                    })
                );
            }
        });
/* ---------- Element CSS Selector Match ---------- */

    var DOM_Proto = Element.prototype;

    DOM_Proto.matches = DOM_Proto.matches || DOM_Proto.webkitMatchesSelector ||
        DOM_Proto.msMatchesSelector || DOM_Proto.mozMatchesSelector ||
        function () {
            if (! this.parentNode)  $('<div />')[0].appendChild(this);

            return  ($.inArray(
                this,  this.parentNode.querySelectorAll( arguments[0] )
            ) > -1);
        };

/* ---------- DOM Token List ---------- */

    function DOMTokenList(iDOM, iName) {

        this.length = 0;

        this.__Node__ = iDOM.attributes.getNamedItem( iName );

        this.value = (this.__Node__.nodeValue  ||  '').trim();

        $.merge(this, this.value.split(/\s+/));
    }

    var ArrayProto = Array.prototype;

    $.each({
        contains:    function () {

            return  ($.inArray(arguments[0], this)  >  -1);
        },
        add:         function (token) {

            if (this.contains( token ))  return;

            ArrayProto.push.call(this, token);

            updateToken.call( this );
        },
        remove:      function (token) {

            var index = $.inArray(token, this);

            if (index > -1)  ArrayProto.splice.call(this, index, 1);
        },
        toggle:      function (token, force) {

            var has = (typeof force === 'boolean')  ?
                    (! force)  :  this.contains( token );

            this[has ? 'remove' : 'add']( token );

            return  (! has);
        }
    },  function (key, method) {

        DOMTokenList.prototype[ key ]  =  function (token) {

            if ( token.match(/\s+/) )
                throw  (self.DOMException || Error)(
                    [
                        "Failed to execute '" + key + "' on 'DOMTokenList':",
                        "The token provided ('" + token + "') contains",
                        "HTML space characters, which are not valid in tokens."
                    ].join(" "),
                    'InvalidCharacterError'
                );

            token = method.call(this, token);

            if ( method.length )
                this.__Node__.nodeValue = this.value =
                    ArrayProto.join.call(this, ' ');

            return token;
        };
    });

    DOMTokenList.prototype.values = function () {

        return  $.makeIterator( this );
    };

    $.each(['', 'SVG', 'Link', 'Anchor', 'Area'],  function (key, proto) {

        proto += 'Element';

        if (key < 2)
            key = 'class';
        else {
            key = 'rel';    proto = 'HTML' + proto;
        }

        proto = (BOM[ proto ]  ||  '').prototype;

        if ((! proto)  ||  ((key + 'List')  in  proto))
            return;

        Object.defineProperty(proto,  key + 'List',  {
            get:           function () {

                return  new DOMTokenList(this, key);
            },
            enumerable:    enumerable
        });
    });

    if (BOM.DOMTokenList  &&  ($.browser.msie < 12))
        BOM.DOMTokenList.prototype.toggle = DOMTokenList.prototype.toggle;


    if (! ($.browser.msie < 11))  return;

/* ---------- Element Data Set ---------- */

    function DOMStringMap() {

        var iMap = this;

        $.each(arguments[0].attributes,  function () {

            if (! this.nodeName.indexOf('data-'))
                iMap[$.camelCase( this.nodeName.slice(5) )] = this.nodeValue;
        });
    }

    Object.defineProperty(DOM_Proto, 'dataset', {
        get:           function () {

            return  new DOMStringMap( this );
        },
        enumerable:    enumerable
    });

    if (! ($.browser.msie < 10))  return;

/* ---------- Error Useful Information ---------- */

    //  Thanks "Kevin Yang" ---
    //
    //      http://www.imkevinyang.com/2010/01/%E8%A7%A3%E6%9E%90ie%E4%B8%AD%E7%9A%84javascript-error%E5%AF%B9%E8%B1%A1.html

    Error.prototype.valueOf = function () {

        return  $.extend(this, {
            code:       this.number & 0x0FFFF,
            helpURL:    'https://msdn.microsoft.com/en-us/library/1dk3k160(VS.85).aspx'
        });
    };

/* ---------- DOM InnerHTML ---------- */

    var InnerHTML = Object.getOwnPropertyDescriptor(DOM_Proto, 'innerHTML');

    Object.defineProperty(DOM_Proto, 'innerHTML', {
        set:           function (iHTML) {

            if (! (iHTML + '').match(
                /^[^<]*<\s*(head|meta|title|link|style|script|noscript|(!--[^>]*--))[^>]*>/i
            ))
                return  InnerHTML.set.call(this, iHTML);

            InnerHTML.set.call(this,  'IE_Scope' + iHTML);

            var iChild = this.childNodes;

            iChild[0].nodeValue = iChild[0].nodeValue.slice(8);

            if (! iChild[0].nodeValue[0])  this.removeChild( iChild[0] );
        },
        enumerable:    enumerable
    });
})(jquery);


(function ($) {

/* ---------- Enhance jQuery Pseudo ---------- */

    /* ----- :image ----- */

    var pImage = $.extend($.makeSet('img', 'svg', 'canvas'), {
            input:    {type:  'image'},
            link:     {type:  'image/x-icon'}
        });

    $.expr[':'].image = function (iDOM) {

        var iName = iDOM.tagName.toLowerCase();

        return  (iName in pImage)  ?
            (
                (pImage[ iName ]  ===  true)  ||
                (pImage[ iName ].type  ===  iDOM.type.toLowerCase())
            )  :  !(
                $( iDOM ).css('background-image').indexOf('url(')
            );
    };

    /* ----- :button ----- */

    var pButton = $.makeSet('button', 'image', 'submit', 'reset');

    $.expr[':'].button = function (iDOM) {

        var iName = iDOM.tagName.toLowerCase();

        return  (iName == 'button')  ||  (
            (iName == 'input')  &&  (iDOM.type.toLowerCase() in pButton)
        );
    };

    /* ----- :input ----- */

    var pInput = $.makeSet('input', 'textarea', 'button', 'select');

    $.expr[':'].input = function (iDOM) {

        return  (iDOM.tagName.toLowerCase() in pInput)  ||
            (typeof iDOM.getAttribute('contentEditable') === 'string')  ||
            iDOM.designMode;
    };

/* ---------- iQuery Extended Pseudo ---------- */

    /* ----- :indeterminate ----- */

    var Check_Type = $.makeSet('radio', 'checkbox');

    $.expr[':'].indeterminate = function (iDOM) {

        switch ( iDOM.tagName.toLowerCase() ) {
            case 'input':
                if (! (iDOM.type in Check_Type))  break;
            case 'progress':
                return  (iDOM.indeterminate === true);
        }
    };

    /* ----- :list, :data ----- */

    var pList = $.makeSet('ul', 'ol', 'dl', 'tbody', 'select', 'datalist');

    $.extend($.expr[':'], {
        list:    function () {

            return  (arguments[0].tagName.toLowerCase() in pList);
        },
        data:    function (iDOM, Index, iMatch) {

            return  Boolean($( iDOM ).data( iMatch[3] ));
        }
    });

    /* ----- :focusable ----- */

    var pFocusable = [
            'a[href],  map[name] area[href]',
            'label, input, textarea, button, select, option, object',
            '*[tabIndex], *[contentEditable]'
        ].join(', ');

    $.expr[':'].focusable = function () {

        return  arguments[0].matches( pFocusable );
    };

    /* ----- :field ----- */

    $.expr[':'].field = function (iDOM) {
        return (
            iDOM.getAttribute('name')  &&  $.expr[':'].input( iDOM )
        )  &&  !(
            iDOM.disabled  ||
            $.expr[':'].button( iDOM )  ||
            $( iDOM ).parents('fieldset[disabled]')[0]
        )
    };

    /* ----- :scrollable ----- */

    var Rolling_Style = $.makeSet('auto', 'scroll');

    $.expr[':'].scrollable = function (iDOM) {

        if (iDOM === iDOM.ownerDocument.scrollingElement)  return true;

        var iCSS = $( iDOM ).css([
                'width',       'height',
                'max-width',   'max-height',
                'overflow-x',  'overflow-y'
            ]);

        return (
            (
                (parseFloat( iCSS.width )  ||  parseFloat( iCSS['max-width'] ))  &&
                (iCSS['overflow-x'] in Rolling_Style)
            )  ||
            (
                (parseFloat( iCSS.height )  ||  parseFloat( iCSS['max-height'] ))  &&
                (iCSS['overflow-y'] in Rolling_Style)
            )
        );
    };

    /* ----- :media ----- */

    var pMedia = $.makeSet('iframe', 'object', 'embed', 'audio', 'video');

    $.expr[':'].media = function (iDOM) {

        return  (iDOM.tagName in pMedia)  ||  $.expr[':'].image( iDOM );
    };

})(jquery);


(function () {

    var BOM = self;

    if (BOM.Promise instanceof Function)  return BOM.Promise;

/* ---------- Promise/A+ Core ---------- */

    function Promise() {

        this.__value__ = undefined;

        this.__state__ = -1;

        this.__callback__ = [ ];

        var _This_ = this;

        arguments[0](function () {

            _This_.resolve( arguments[0] );

        },  function () {

            _This_.reject( arguments[0] );
        });
    }

    var __Private__ = { };

    Promise.prototype.reject = function () {

        __Private__.endBy.call(this, 1, arguments[0]);
    };

    Promise.prototype.resolve = function (_Value_) {

        if (_Value_ == this)
            throw  TypeError("Can't return the same Promise object !");

        if (typeof (_Value_ || '').then != 'function')
            return  __Private__.endBy.call(this, 0, _Value_);

        var _This_ = this;

        _Value_.then(function () {

            _This_.resolve( arguments[0] );

        },  function () {

            _This_.reject( arguments[0] );
        });
    };

    __Private__.endBy = function (iState, iValue) {

        if (this.__state__ > -1)  return;

        var _This_ = this;

        setTimeout(function () {

            _This_.__value__ = iValue;

            _This_.__state__ = iState;

            __Private__.exec.call(_This_);
        });
    };

    __Private__.exec = function () {

        var _CB_;

        if (this.__state__ > -1)
            while (_CB_ = this.__callback__.shift())
                if (typeof _CB_[this.__state__]  ==  'function')  try {

                    _CB_[2]( _CB_[this.__state__]( this.__value__ ) );

                } catch (iError) {

                    _CB_[3]( iError );
                }
    };

    Promise.prototype.then = function (iResolve, iReject) {

        var _This_ = this;

        return  new Promise(function () {

            _This_.__callback__.push([
                iResolve,  iReject,  arguments[0],  arguments[1]
            ]);

            __Private__.exec.call(_This_);
        });
    };

/* ---------- ES 6  Promise Helper ---------- */

    Promise.resolve = function (iValue) {

        return  (iValue instanceof this)  ?  iValue  :  new this(function () {

            arguments[0]( iValue );
        });
    };

    Promise.reject = function (iError) {

        return  new this(function () {

            arguments[1]( iError );
        });
    };

    Promise.all = function (iQueue) {

        var iValue = [ ],  iSum = iQueue.length;

        return  iSum  ?  (new this(function (iResolve, iReject) {

            ' '.repeat( iSum ).replace(/ /g,  function (_, Index) {

                Promise.resolve( iQueue[Index] ).then(function () {

                    iValue[ Index ] = arguments[0];

                    if (! --iSum)  iResolve( iValue );

                },  iReject);
            });
        }))  :  this.resolve( iQueue );
    };

    Promise.race = function (iQueue) {

        return  new Promise(function () {

            for (var i = 0;  iQueue[i];  i++)
                Promise.resolve( iQueue[i] ).then(arguments[0], arguments[1]);
        });
    };

    return  BOM.Promise = Promise;

})();


var event_ext_Observer = (function ($) {

    function Observer(connect) {

        if (! (this instanceof Observer))  return  new Observer( connect );

        this.setPrivate({
            connect:    connect,
            handle:     [ ],
            'break':    null
        });
    }

    function next() {

        for (var i = 0;  this.__handle__[i];  i++)
            this.__handle__[i]( arguments[0] );
    }

    return  $.Observer = $.Class.extend(Observer, null, {
        listen:    function (callback) {

            if (this.__handle__.indexOf( callback )  <  0) {

                this.__handle__.push( callback );

                if (! this.__handle__[1])
                    this.__break__ = this.__connect__( $.proxy(next, this) );
            }

            return this;
        },
        cancel:    function (callback) {

            this.__handle__.splice(
                this.__handle__.indexOf( callback ),  1
            );

            if (! this.__handle__[0])  this.__break__();

            return this;
        },
        clear:     function () {

            this.__handle__.length = 0;

            this.__break__();

            return this;
        }
    });
})(jquery);


var event_ext_base = (function ($, Observer) {

/* ---------- Event from Pseudo ---------- */

    $.Event.prototype.isPseudo = function () {

        var $_This = $( this.currentTarget );

        var iOffset = $_This.offset();

        return Boolean(
            (this.pageX  &&  (
                (this.pageX < iOffset.left)  ||
                (this.pageX  >  (iOffset.left + parseFloat($_This.css('width'))))
            ))  ||
            (this.pageY  &&  (
                (this.pageY < iOffset.top)  ||
                (this.pageY  >  (iOffset.top + parseFloat($_This.css('height'))))
            ))
        );
    };
/* ---------- Event extension API ---------- */

    var Event_Map = { };

    $.customEvent = function (type, factory) {

        if (typeof factory === 'function') {

            $.each(type.split(/\s+/),  function () {
                (
                    Event_Map[ this ] = Event_Map[ this ]  ||  [ ]
                ).unshift( factory );
            });
        } else if (Event_Map[ type ])
            for (var i = 0, observer;  Event_Map[ type ][i];  i++) {

                observer = Event_Map[ type ][i](factory, type);

                if ((observer != null)  &&  (observer instanceof Observer))
                    return observer;
            }
    };

/* ---------- Original supported Event ---------- */

    var Mutation_Event = $.makeSet(
            'DOMContentLoaded',
            'DOMAttrModified', 'DOMAttributeNameChanged',
            'DOMCharacterDataModified',
            'DOMElementNameChanged',
            'DOMNodeInserted', 'DOMNodeInsertedIntoDocument',
            'DOMNodeRemoved',  'DOMNodeRemovedFromDocument',
            'DOMSubtreeModified'
        );

    function originOf(type) {
        return (
            ('on' + type)  in
            Object.getPrototypeOf(this || document.documentElement)
        ) || (
            $.browser.modern  &&  (type in Mutation_Event)
        );
    }

    return $.extend({
        addEvent:       function (type, handler, cache) {

            var observer = cache.observer  ||  $.customEvent(type, this);

            if ( observer ) {

                if (typeof observer != 'string')
                    return (
                        cache.observer = observer
                    ).listen(
                        cache.proxyDispatch = $.proxy(handler, this)
                    );
                else
                    type = observer;
            }

            if (! originOf.call(this, type))  return;

            if (typeof this.addEventListener === 'function')
                this.addEventListener(type, handler);
            else {
                cache.proxyDispatch = $.proxy(handler, this);

                this.attachEvent('on' + type,  cache.proxyDispatch);
            }
        },
        removeEvent:    $.removeEvent  ||  function (type, handler, cache) {

            if ( cache.observer ) {

                cache.observer.clear();

                delete cache.observer;    delete cache.proxyDispatch;

            } else if (originOf.call(this, type)) {

                if (typeof this.removeEventListener === 'function')
                    this.removeEventListener(type, handler);
                else {
                    this.detachEvent('on' + type,  cache.proxyDispatch);

                    delete cache.proxyDispatch;
                }
            }

            return cache;
        }
    });
})(jquery, event_ext_Observer);


(function ($) {

    $.buildFragment = $.buildFragment  ||  function (iNode) {

        iNode = $.makeArray( iNode );

        var iFragment = (arguments[1] || document).createDocumentFragment();

        for (var i = 0;  iNode[i];  i++)  iFragment.appendChild( iNode[i] );

        return iFragment;
    };

/* ---------- Insert by Index ---------- */

    $.fn.insertTo = function ($_Target, Index) {

        var DOM_Set = $.buildFragment(this, document),  $_This = [ ];

        $( $_Target ).each(function () {

            DOM_Set = arguments[0]  ?  DOM_Set.cloneNode( true )  :  DOM_Set;

            $.merge($_This, DOM_Set.children);

            this.insertBefore(DOM_Set,  this.children[Index || 0]);
        });

        return  this.pushStack( $_This );
    };

/* ---------- DOM Tree Iterator ---------- */

    $.fn.treeWalker = function (nodeType, filter) {

        if (nodeType instanceof Function)
            filter = nodeType,  nodeType = 0;
        else
            filter = (typeof filter === 'function')  ?  filter  :  '';

        var element = (nodeType === 1)  ?  'Element'  :  '',  _This_,  _Root_;

        var FC = 'first' + element + 'Child',  NS = 'next' + element + 'Sibling';

        _This_ = _Root_ = this[0];

        return {
            forward:    function (noChild) {

                if ((! noChild)  &&  _This_[ FC ])
                    return  _This_ = _This_[ FC ];

                _This_ = (_This_ != _Root_)  &&  _This_;

                while (_This_) {

                    if (_This_[ NS ])  return  _This_ = _This_[ NS ];

                    _This_ = (_This_.parentNode != _Root_)  &&  _This_.parentNode;
                }
            },
            replace:    function (iNew) {

                iNew = $.buildFragment(
                    (iNew instanceof Element)  ?
                        [ iNew ]  :  $.makeArray( iNew )
                );

                if (! iNew.childNodes[0])  return;

                _This_.parentNode.replaceChild(
                    [iNew,  iNew = iNew.childNodes[0]][0],  _This_
                );

                _This_ = iNew;
            },
            next:       function () {

                if (! _This_)  return  {done: true};

                var iNew = filter  &&  filter.call(_Root_, _This_);

                if (iNew  &&  (iNew != _This_)  &&  _This_.parentNode)
                    this.replace( iNew );
                else if (iNew === false)
                    this.forward();

                if (! _This_)  return  {done: true};

                var item = {value: _This_,  done: false};

                this.forward(iNew === null);

                return item;
            }
        };
    };
/* ---------- HTML with Script Executable ---------- */

    $.fn.htmlExec = function (HTML, selector) {

        this.empty();

        var $_Box = $('<div />');

        $_Box[0].innerHTML = HTML;

        return  (! selector)  ?
            this.each(function () {

                $_Box = $( $_Box[0].cloneNode( true ) );

                var walker = $_Box.treeWalker(1,  function (iDOM) {

                        if (iDOM.tagName.toLowerCase() != 'script')  return;

                        var iAttr = { };

                        $.each(iDOM.attributes,  function () {

                            iAttr[ this.nodeName ] = this.nodeValue;
                        });

                        return  $('<script />',  iAttr)[0];
                    });

                while (! walker.next().done)  ;

                $_Box.children().insertTo( this );
            })  :
            $_Box.find( selector ).insertTo( this );
    };

})(jquery);


var AJAX_ext_URL = (function ($) {

    var BOM = self;

    $.paramJSON = function (search) {

        var _Args_ = { };

        $.each(
            Array.from(
                (new BOM.URLSearchParams(
                    (search || BOM.location.search).split('?')[1]
                )).entries()
            ),
            function () {
                if (
                    (! $.isNumeric(this[1]))  ||
                    Number.isSafeInteger( +this[1] )
                )  try {
                    this[1] = JSON.parse( this[1] );
                } catch (iError) { }

                if (this[0] in _Args_)
                    _Args_[this[0]] = [ ].concat(_Args_[this[0]], this[1]);
                else
                    _Args_[this[0]] = this[1];
            }
        );

        return _Args_;
    };

/* ---------- URL Parameter Signature  v0.1 ---------- */

    function JSON_Sign(iData) {

        return  '{'  +  $.map(Object.keys( iData ).sort(),  function (iKey) {

            return  '"'  +  iKey  +  '":'  +  JSON.stringify( iData[iKey] );

        }).join()  +  '}';
    }

    $.paramSign = function (iData) {

        iData = iData.valueOf();

        if (typeof iData === 'string')  iData = this.paramJSON( iData );

        var _Data_ = new BOM.URLSearchParams();

        $.each(iData,  function (name, value) {

            switch ( true ) {
                case  (this === BOM):
                    value = '';
                    break;
                case  (typeof value === 'object'):
                    value = JSON_Sign( this );
                    break;
                case  $.likeArray( this ):
                    value = '['  +  $.map(this, JSON_Sign).join()  +  ']';
                    break;
                case (this instanceof Function):
                    return;
            }

            _Data_.append(name, value);
        });

        _Data_.sort();

        return  _Data_ + '';
    };

    return $.extend({
        extendURL:    function (iURL) {

            if (! arguments[1])  return iURL;

            var iURL = $.split(iURL, '?', 2);

            var iPath = iURL[0];    arguments[0] = iURL[1];

            return  iPath  +  '?'  +  $.param($.extend.apply($,  Array.from(
                arguments,  function (_This_) {

                    _This_ = _This_.valueOf();

                    return  (typeof _This_ != 'string')  ?
                        _This_  :  $.paramJSON('?' + _This_);
                }
            )));
        },
        fileName:     function () {
            return (
                arguments[0] || BOM.location.pathname
            ).match(/([^\?\#]+)(\?|\#)?/)[1].split('/').slice(-1)[0];
        },
        filePath:     function () {
            return (
                arguments[0] || BOM.location.href
            ).match(/([^\?\#]+)(\?|\#)?/)[1].split('/').slice(0, -1).join('/');
        },
        urlDomain:    function (iURL) {

            return  (! iURL)  ?  BOM.location.origin  :
                (iURL.match( /^(\w+:)?\/\/[^\/]+/ )  ||  '')[0];
        },
        isXDomain:    function () {
            return (
                BOM.location.origin !==
                (new BOM.URL(arguments[0],  this.filePath() + '/')).origin
            );
        }
    });
})(jquery);


(function ($) {

/* ---------- Form Data Object ---------- */

    if (! ($.browser.msie < 10))  return;

    function FormData() {

        this.setPrivate(
            'owner',
            arguments[0] ||
                $('<form style="display: none" />').appendTo( document.body )[0]
        );
    }

    function itemOf() {

        return  $('[name="' + arguments[0] + '"]:field',  this.__owner__);
    }

    $.Class.extend(FormData, null, {
        append:      function (name, value) {

            $('<input />', {
                type:     'hidden',
                name:     name,
                value:    value
            }).appendTo( this.__owner__ );
        },
        'delete':    function (name) {

            itemOf.call(this, name).remove();
        },
        set:         function (name, value) {

            this['delete']( name );    this.append(name, value);
        },
        get:         function (name) {

            return  itemOf.call(this, name).val();
        },
        getAll:      function (name) {

            return  $.map(itemOf.call(this, name),  function () {

                return arguments[0].value;
            });
        },
        toString:    function () {

            return  $( this.__owner__ ).serialize();
        },
        entries:     function () {

            return $.makeIterator(Array.from(
                $( this.__owner__ ).serializeArray(),  function (_This_) {

                    return  [_This_.name, _This_.value];
                }
            ));
        }
    });

    self.FormData = FormData;

})(jquery);


(function ($) {

    var iOperator = {
            '+':    function () {
                return  arguments[0] + arguments[1];
            },
            '-':    function () {
                return  arguments[0] - arguments[1];
            }
        };

    function Array_Reverse() {

        return  ($.Type( this )  !=  'iQuery')  ?
            this  :  Array.prototype.reverse.call( this );
    }

    $.fn.extend({
        reduce:           function (iMethod, iKey, iCallback) {

            if (arguments.length < 3)    iCallback = iKey,  iKey = '';

            if (typeof iCallback === 'string')
                iCallback = iOperator[ iCallback ];

            return  $.map(this,  function () {

                return  $.fn[ iMethod ].apply(
                    $( arguments[0] ),  iKey ? [iKey] : []
                );
            }).reduce( iCallback );
        },
        sameParents:      function () {

            if (this.length < 2)  return this.parents();

            var iMin = $.trace(this[0], 'parentNode').slice(0, -1),  iPrev;

            for (var i = 1, iLast;  this[i];  i++) {

                iLast = $.trace(this[i], 'parentNode').slice(0, -1);

                if (iLast.length < iMin.length)    iPrev = iMin,  iMin = iLast;
            }

            iPrev = iPrev || iLast;

            var iDiff = iPrev.length - iMin.length,  $_Result = [ ];

            for (var i = 0;  iMin[i];  i++)
                if (iMin[i]  ===  iPrev[i + iDiff]) {
                    $_Result = iMin.slice(i);
                    break;
                }

            return Array_Reverse.call(this.pushStack(
                arguments[0]  ?  $( $_Result ).filter( arguments[0] )  :  $_Result
            ));
        },
        scrollParents:    function () {

            return Array_Reverse.call(this.pushStack($.merge(
                this.eq(0).parents(':scrollable'),  [ document ]
            )));
        },
        scrollTo:         function () {

            if (! this[0])  return this;

            var $_This = this;

            $( arguments[0] ).each(function () {

                var $_Scroll = $_This.has( this );

                var iCoord = $( this ).offset(),  _Coord_ = $_Scroll.offset();

                if (! $_Scroll.length)  return;

                $_Scroll.animate({
                    scrollTop:     (! _Coord_.top)  ?  iCoord.top  :  (
                        $_Scroll.scrollTop()  +  (iCoord.top - _Coord_.top)
                    ),
                    scrollLeft:    (! _Coord_.left)  ?  iCoord.left  :  (
                        $_Scroll.scrollLeft()  +  (iCoord.left - _Coord_.left)
                    )
                });
            });

            return this;
        }
    });

/* ---------- HTML DOM SandBox ---------- */

    $.fn.sandBox = function () {

        var iArgs = $.makeArray( arguments );

        var iCallback = (typeof iArgs.slice(-1)[0] == 'function')  &&  iArgs.pop();

        var iHTML = $.isSelector( iArgs[0] )  ?  ''  :  iArgs.shift();

        var iSelector = iArgs[0];

        var $_iFrame = this.filter('iframe').eq(0);

        if (! $_iFrame.length)
            $_iFrame = $('<iframe style="display: none"></iframe>');

        $_iFrame.one('load',  function () {

            var _DOM_ = this.contentWindow.document;

            function Frame_Ready() {

                if (! (_DOM_.body && _DOM_.body.childNodes.length))
                    return;

                var $_Content = $(iSelector || 'body > *',  _DOM_);

                if (iCallback  &&  (false === iCallback.call(
                    $_iFrame[0],  $($.merge(
                        $.makeArray($('head style, head script',  _DOM_)),
                        $_Content[0] ? $_Content : _DOM_.body.childNodes
                    ))
                )))
                    $_iFrame.remove();

                if ( $.browser.msie )  self.CollectGarbage();

                return false;
            }

            if (! iHTML)  Frame_Ready();

            $.every(0.04, Frame_Ready);

            _DOM_.write(iHTML);    _DOM_.close();

        }).attr(
            'src',  ((! iHTML.match(/<.+?>/)) && iHTML.trim())  ||  'about:blank'
        );

        return  $_iFrame[0].parentElement ? this : $_iFrame.appendTo('body');
    };

})(jquery);


var object_ext_advanced = (function ($) {

    return $.extend({
        formatJSON:    function () {

            return  JSON.stringify(arguments[0], null, 4)
                .replace(/(\s+"[^"]+":) ([^\s]+)/g, '$1    $2');
        },
        curry:         function (iOrigin) {

            return  function iProxy() {

                return  (arguments.length >= iOrigin.length)  ?
                    iOrigin.apply(this, arguments)  :
                    $.proxy.apply($,  $.merge([iProxy, this], arguments));
            };
        },
        intersect:    function intersect() {

            if (arguments.length < 2)  return arguments[0];

            var iArgs = Array.from( arguments );

            var iArray = $.likeArray( iArgs[0] );

            iArgs[0] = $.map(iArgs.shift(),  function (iValue, iKey) {
                if ( iArray ) {
                    if (iArgs.indexOf.call(iArgs[0], iValue)  >  -1)
                        return iValue;
                } else if (
                    (iArgs[0][iKey] !== undefined)  &&
                    (iArgs[0][iKey] === iValue)
                )
                    return iValue;
            });

            return  intersect.apply(this, iArgs);
        },
        patch:        function patch(target, source) {

            if (target === source)  return target;

            for (var key in source)  if (source[key] != null) {

                if ($.likeArray( source[key] ))
                    target[key] = $.merge(target[key] || [ ],  source[key]);
                else if (typeof source[key] === 'object')
                    target[key] = patch(target[key] || { },  source[key]);
                else if (! (target[key] != null))
                    target[key] = source[key];
            }

            if (typeof target === 'function')
                patch(target.prototype,  (source || '').prototype);

            return target;
        }
    });
})(jquery);


var AJAX_ext_HTML_Request = (function ($) {

    function HTMLHttpRequest() {

        this.status = 0;

        this.readyState = 0;

        this.responseType = 'text';
    }

    var Success_State = {
            readyState:    4,
            status:        200,
            statusText:    'OK'
        },
        Fail_State = {
            readyState:    4,
            status:        500,
            statusText:    'Internal Server Error'
        };

    function Allow_Send() {
        return  (this.readyState == 1)  ||  (this.readyState == 4);
    }

    function iFrame_Send() {

        var iHHR = this,
            iTarget = this.$_Transport.submit(
                $.proxy(Allow_Send, this)
            ).attr('target');

        if ((! iTarget)  ||  iTarget.match( /^_(top|parent|self|blank)$/i )) {

            iTarget = $.uuid('HHR');

            this.$_Transport.attr('target', iTarget);
        }

        $('iframe[name="' + iTarget + '"]').sandBox(function () {

            var _DOM_ = this.contentWindow.document;

            $.extend(iHHR, Success_State, {
                responseHeader:    {
                    'Set-Cookie':      _DOM_.cookie,
                    'Content-Type':
                        _DOM_.contentType + '; charset=' + _DOM_.charset
                },
                responseType:      'text',
                response:          iHHR.responseText =
                    $( this ).contents().find('body').text()
            });

            iHHR.onload();

            return false;

        }).attr('name', iTarget);

        this.$_Transport.submit();
    }

    var JSONP_Map = { };

    HTMLHttpRequest.JSONP = function (iData) {

        var _This_ = document.currentScript;

        iData = $.extend({
            responseHeader:    {
                'Content-Type':    _This_.type + '; charset=' + _This_.charset
            },
            responseType:      'json',
            response:          iData,
            responseText:      JSON.stringify( iData )
        }, Success_State);

        var iHHR = JSONP_Map[ _This_.src ];

        for (var i = 0;  iHHR[i];  i++)  if ( iHHR[i].$_Transport ) {

            $.extend(iHHR[i], iData).onload();

            iHHR[i].$_Transport.remove();
        }

        iHHR.length = 0;
    };

    function Script_Send() {

        this.responseURL = $.extendURL(
            this.responseURL.replace(/(\w+)=\?/, '$1=HTMLHttpRequest.JSONP'),
            arguments[0]
        );

        this.$_Transport = $('<script />', {
            type:       'text/javascript',
            charset:    'UTF-8',
            src:        this.responseURL
        }).on('error',  $.proxy(this.onerror, $.extend(this, Fail_State, {
            responseType:    'text',
            response:        '',
            responseText:    ''
        }))).appendTo('head');

        var iURL = this.$_Transport[0].src;

        (JSONP_Map[iURL] = JSONP_Map[iURL]  ||  [ ]).push( this );
    }

    $.extend(HTMLHttpRequest.prototype, {
        open:                 function () {
            this.responseURL = arguments[1];

            this.readyState = 1;
        },
        send:                 function (iData) {

            if (! Allow_Send.call( this ))  return;

            this.$_Transport =
                (iData instanceof self.FormData)  &&  $( iData.__owner__ );

            if (this.$_Transport && (
                iData.__owner__.method.toUpperCase() === 'POST'
            ))
                iFrame_Send.call( this );
            else
                Script_Send.call(this, iData);

            this.readyState = 2;
        },
        abort:                function () {
            this.$_Transport.remove();

            this.$_Transport = null;

            this.readyState = 0;
        },
        setRequestHeader:     function () {

            console.warn("JSONP/iframe doesn't support Changing HTTP Headers...");
        },
        getResponseHeader:    function () {

            return  this.responseHeader[ arguments[0] ]  ||  null;
        }
    });

    return  self.HTMLHttpRequest = HTMLHttpRequest;

})(jquery);


(function ($, HTMLHttpRequest) {

    var BOM = self;

/* ---------- Cacheable JSONP ---------- */

    function HHR_Transport(iOption, iOrigin) {

        if (iOption.dataType != 'jsonp')  return;

        iOption.cache = ('cache' in iOrigin)  ?  iOrigin.cache  :  true;

        if ( iOption.cache )  iOption.url = iOption.url.replace(/&?_=\d+/, '');

        if ($.Type( this )  !=  'iQuery') {

            iOption.url = iOption.url.replace(
                RegExp('&?' + iOption.jsonp + '=\\w+'),  ''
            ).trim('?');

            iOption.dataTypes.shift();
        }

        var iXHR;

        return {
            send:     function (iHeader, iComplete) {

                iOption.url += (iOption.url.split('?')[1] ? '&' : '?')  +
                    iOption.jsonp + '=?';

                iXHR = new HTMLHttpRequest();

                iXHR.open(iOption.method, iOption.url);

                iXHR.onload = iXHR.onerror = function () {

                    var iResponse = {text:  this.responseText};

                    iResponse[ this.responseType ] = this.response;

                    iComplete(this.status, this.statusText, iResponse);
                };

                iXHR.send( iOption.data );
            },
            abort:    function () {

                iXHR.abort();
            }
        };
    }
/* ---------- Cross Domain XHR (IE 10-) ---------- */

    $.ajaxTransport('+script',  $.proxy(HHR_Transport, $));

    if (! ($.browser.msie < 10))  return;


    $.ajaxTransport('+*',  function (iOption) {

        var iXHR,  iForm = (iOption.data || '').__owner__;

        if (
            (iOption.data instanceof BOM.FormData)  &&
            $( iForm ).is('form')  &&
            $('input[type="file"]', iForm)[0]
        )
            return  HHR_Transport.call($, iOption);

        return  iOption.crossDomain && {
            send:     function (iHeader, iComplete) {

                iXHR = new BOM.XDomainRequest();

                iXHR.open(iOption.method, iOption.url, true);

                $.extend(iXHR, {
                    timeout:      iOption.timeout || 0,
                    onload:       function () {
                        iComplete(
                            200,
                            'OK',
                            {text:  iXHR.responseText},
                            'Content-Type: ' + iXHR.contentType
                        );
                    },
                    onerror:      function () {

                        iComplete(500, 'Internal Server Error', {
                            text:    iXHR.responseText
                        });
                    },
                    ontimeout:    $.proxy(
                        iComplete,  null,  504,  'Gateway Timeout'
                    )
                });

                iXHR.send( iOption.data );
            },
            abort:    function () {

                iXHR.abort();    iXHR = null;
            }
        };
    });
})(jquery, AJAX_ext_HTML_Request);


(function ($) {

    var BOM = self;

/* ---------- CSS Selector Priority ---------- */

    var Pseudo_Class = $.makeSet([
            ':link', 'visited', 'hover', 'active', 'focus', 'lang',
            'enabled', 'disabled', 'checked',
            'first-child', 'last-child', 'first-of-type', 'last-of-type',
            'nth-child', 'nth-of-type', 'nth-last-child', 'nth-last-of-type',
            'only-child', 'only-of-type', 'empty'
        ].join(' :').split(' '));

    $.selectorPriority = function (iSelector) {

        var iPriority = [0, 0, 0];

        if (iSelector.match( /\#[^\s>\+~]+/ ))  iPriority[0]++ ;

        var iPseudo = iSelector.match( /:[^\s>\+~]+/g )  ||  [ ];

        var pClass = $.map(iPseudo,  function () {

                if (arguments[0] in Pseudo_Class)  return arguments[0];
            });

        iPriority[1] += (
            iSelector.match( /\.[^\s>\+~]+/g )  ||  [ ]
        ).concat(
            iSelector.match( /\[[^\]]+\]/g )  ||  [ ]
        ).concat( pClass ).length;

        iPriority[2] += ((
            iSelector.match( /[^\#\.\[:]?[^\s>\+~]+/g )  ||  [ ]
        ).length + (
            iPseudo.length - pClass.length
        ));

        return iPriority;
    };

/* ---------- CSS Prefix ---------- */

    var CSS_Prefix = (function (iHash) {

            for (var iKey in iHash)
                if ($.browser[ iKey ])  return iHash[iKey];
        })({
            mozilla:    'moz',
            webkit:     'webkit',
            msie:       'ms'
        });

    $.cssName = $.curry(function (Test_Type, iName) {

        return  BOM[ Test_Type ]  ?  iName  :  ('-' + CSS_Prefix + '-' + iName);
    });

/* ---------- CSS Rule (Default) ---------- */

    var Tag_Style = { },  _BOM_;

    $( document ).ready(function () {

        _BOM_ = $('<iframe />', {
            id:     '_CSS_SandBox_',
            src:    'about:blank',
            css:    {display:  'none'}
        }).appendTo( this.body )[0].contentWindow;
    });

    if (typeof BOM.getDefaultComputedStyle != 'function')
        BOM.getDefaultComputedStyle = function (iTagName, pseudo) {

            if (! Tag_Style[ iTagName ]) {

                var $_Default = $('<' + iTagName + ' />').appendTo(
                        _BOM_.document.body
                    );
                Tag_Style[ iTagName ] = $.extend(
                    { },  self.getComputedStyle($_Default[0], pseudo)
                );
                $_Default.remove();
            }

            return  Tag_Style[ iTagName ];
        };

/* ---------- CSS Rule (Matched) ---------- */

    $.searchCSS = function (iStyleSheet, iFilter) {

        if (iStyleSheet instanceof Function)
            iFilter = iStyleSheet,  iStyleSheet = '';

        return  $.map(iStyleSheet || document.styleSheets,  function _Self_() {

            var iRule = arguments[0].cssRules;

            if (! iRule)  return;

            return  $.map(iRule,  function (_Rule_) {

                return  (_Rule_.cssRules ? _Self_ : iFilter)(_Rule_);
            });
        });
    };

    function CSSRuleList() {

        this.length = 0;

        $.merge(this, arguments[0]);
    }

    if (typeof BOM.getMatchedCSSRules != 'function')
        BOM.getMatchedCSSRules = function (iElement, iPseudo) {

            if (! (iElement instanceof Element))  return null;

            if (typeof iPseudo === 'string') {

                iPseudo = (iPseudo.match(/^\s*:{1,2}([\w\-]+)\s*$/) || [ ])[1];

                if (! iPseudo)  return null;

            } else if ( iPseudo )  iPseudo = null;

            return  new CSSRuleList($.searchCSS(function (iRule) {

                var iSelector = iRule.selectorText;

                if ( iPseudo ) {
                    iSelector = iSelector.replace(/:{1,2}([\w\-]+)$/,  function () {

                        return  (arguments[1] === iPseudo)  ?  ''  :  arguments[0];
                    });

                    if (iSelector === iRule.selectorText)  return;
                }

                if (iElement.matches( iSelector ))  return iRule;
            }));
        };
})(jquery);


(function ($) {

/* ----------  JSON to <style />  ---------- */

    var Code_Indent = $.browser.modern ? '' : ' '.repeat(4);

    function CSS_Attribute(iName, iValue) {

        if ($.isNumeric( iValue )  &&  (iName in $.cssPX))
            iValue += 'px';

        return  [iName, ':', Code_Indent, iValue].join('');
    }

    function CSS_Rule2Text(iRule) {

        var Rule_Text = [''];

        $.each(iRule,  function (iSelector) {

            var Rule_Block = [ ];

            for (var iName in this)
                Rule_Block.push(
                    CSS_Attribute(iName, this[iName])
                        .replace(/^(\w)/m,  Code_Indent + '$1')
                );

            Rule_Text.push(
                [iSelector + ' {',  Rule_Block.join(";\n"),  '}'].join("\n")
            );
        });

        return  Rule_Text.concat('').join("\n");
    }

    $.cssRule = function (At_Wrapper, iRule) {

        if (typeof At_Wrapper.valueOf() != 'string')
            iRule = At_Wrapper,  At_Wrapper = null;

        var CSS_Text = CSS_Rule2Text( iRule );

        return  $('<style />', {
            type:       'text/css',
            'class':    'iQuery_CSS-Rule',
            text:       (! At_Wrapper)  ?  CSS_Text  :  [
                At_Wrapper + ' {',
                CSS_Text.replace(/\n/m,  "\n" + Code_Indent),
                '}'
            ].join("\n")
        })[0];
    };

/* ---------- CSS Rule (Scoped) ---------- */

    function Scope_Selector(_ID_) {

        return  $.map(arguments[1].split( /\s*,\s*/ ),  function (_This_) {

            return  /[\s>\+~]?#/.test(_This_)  ?
                _This_  :  ('#'  +  _ID_  +  ' '  +  _This_);

        }).join(',  ');
    }

    var Global_Style = $.makeSet('#document', 'html', 'body');


    $.fn.cssRule = function (iRule, iCallback) {

        if (! $.isPlainObject( iRule )) {

            var $_This = this;

            return  $_This[0]  &&  $.searchCSS(function (_Rule_) {
                if ((
                    (typeof $_This.selector != 'string')  ||
                    ($_This.selector != _Rule_.selectorText)
                )  &&  !(
                    $_This[0].matches( _Rule_.selectorText )
                ))
                    return;

                if ((! iRule)  ||  (iRule && _Rule_.style[iRule]))
                    return _Rule_;
            });
        }

        this.not([self, document.head]).uniqueId().each(function () {

            var _Rule_ = { };

            for (var iSelector in iRule)
                _Rule_[Scope_Selector(this.id, iSelector)] = iRule[ iSelector ];

            var $_Insert = $(
                    'style, link[rel="stylesheet"]',
                    (this.nodeName.toLowerCase() in Global_Style)  ?
                        document.head  :  this
                ),
                end = 'After';

            if ( $_Insert[0] )
                $_Insert = $_Insert.slice( -1 );
            else
                $_Insert = $( this ),  end = 'Before';

            _Rule_ = $( $.cssRule(_Rule_) )['insert' + end]( $_Insert )[0];

            if (typeof iCallback === 'function')
                iCallback.call(this,  _Rule_.sheet || _Rule_.styleSheet);
        });

        return this;
    };

})(jquery);


(function ($) {

/* ---------- Smart zIndex ---------- */

    function Get_zIndex() {
        for (
            var $_This = $( this ),  zIndex;
            $_This[0];
            $_This = $( $_This[0].offsetParent )
        )
            if ($_This.css('position') != 'static') {

                zIndex = parseInt( $_This.css('z-index') );

                if (zIndex > 0)  return zIndex;
            }

        return 0;
    }

    function Set_zIndex() {

        var $_This = $( this ),  _Index_ = 0;

        $_This.siblings().addBack().filter(':visible').each(function () {

            _Index_ = Math.max(_Index_,  Get_zIndex.call( this ));
        });

        $_This.css('z-index', ++_Index_);
    }

    $.fn.zIndex = function (new_Index) {

        if (! arguments.length)  return  Get_zIndex.call( this[0] );

        if (new_Index === '+')  return  this.each( Set_zIndex );

        return  this.css('z-index',  parseInt( new_Index ) || 'auto');
    };

})(jquery);


(function ($) {

/* ---------- Single Finger Touch ---------- */

    function get_Touch(iEvent) {

        var iTouch = iEvent;

        if ($.browser.mobile)  try {

            iTouch = iEvent.changedTouches[0];

        } catch (iError) {

            iTouch = iEvent.touches[0];
        }

        iTouch.timeStamp = iEvent.timeStamp || $.now();

        return iTouch;
    }

    var sType = $.browser.mobile ? 'touchstart MSPointerDown' : 'mousedown',
        eType = $.browser.mobile ? 'touchend touchcancel MSPointerUp' : 'mouseup';

    $.customEvent('tap press swipe',  function (DOM, type) {

        var iStart;

        return  $.Observer(function (next) {

            function sTouch() {

                iStart = get_Touch( arguments[0].originalEvent );
            }

            function eTouch(iEvent) {

                var iEnd = get_Touch( iEvent.originalEvent );

                iEvent = {
                    target:    iEvent.target,
                    detail:    iEnd.timeStamp - iStart.timeStamp,
                    deltaX:    iStart.pageX - iEnd.pageX,
                    deltaY:    iStart.pageY - iEnd.pageY
                };

                var iShift = Math.sqrt(
                        Math.pow(iEvent.deltaX, 2)  +  Math.pow(iEvent.deltaY, 2)
                    );

                if (iEvent.detail > 300)
                    iEvent.type = 'press';
                else if (iShift < 22)
                    iEvent.type = 'tap';
                else
                    iEvent.type = 'swipe',  iEvent.detail = iShift;

                if (iEvent.type === type)  next( iEvent );
            }

            $( DOM ).on(sType, sTouch).on(eType, eTouch);

            return  function () {

                $( DOM ).off(sType, sTouch).off(eType, eTouch);
            };
        });
    });

/* ---------- Text Input Event ---------- */

    if ( $.browser.modern )  return;

    function from_Input() {

        switch ( self.event.srcElement.tagName.toLowerCase() ) {
            case 'input':       ;
            case 'textarea':    return true;
        }
    }

    $.customEvent('input',  function (DOM) {

        if ('oninput'  in  Object.getPrototypeOf( DOM ))  return;

        return  new Observer(function (next) {

            var handler = {
                    propertychange:    function () {

                        if (self.event.propertyName === 'value')
                            next( arguments[0] );
                    },
                    paste:             function () {

                        if (! from_Input())  next( arguments[0] );
                    },
                    keyup:             function (iEvent) {

                        var iKey = iEvent.keyCode;

                        if (
                            from_Input()  ||
                            (iKey < 48)  ||  (iKey > 105)  ||
                            ((iKey > 90)  &&  (iKey < 96))  ||
                            iEvent.ctrlKey  ||  iEvent.shiftKey  ||  iEvent.altKey
                        )
                            return;

                        next( iEvent );
                    }
                };

            for (var type in handler)
                DOM.attachEvent('on' + type,  handler[ type ]);

            return  function () {

                for (var type in handler)
                    DOM.detachEvent('on' + type,  handler[ type ]);
            };
        });
    });
})(jquery);


(function ($) {

/* ---------- Focus AnyWhere ---------- */

    var DOM_Focus = $.fn.focus;

    $.fn.focus = function () {

        this.not(':focusable').attr('tabIndex', -1).css('outline', 'none');

        return  DOM_Focus.apply(this, arguments);
    };

/* ---------- User Idle Event ---------- */

    var End_Event = 'keydown mousedown scroll';

    $.fn.onIdleFor = function (iSecond, iCallback) {

        return  this.each(function _Self_() {

            var iNO,  $_This = $( this );

            function iCancel() {

                clearTimeout( iNO );

                _Self_.call( $_This.off(End_Event, iCancel)[0] );
            }

            iNO = $.wait(iSecond,  function () {

                iCallback.call(
                    $_This.off(End_Event, iCancel)[0],
                    $.Event({
                        type:      'idle',
                        target:    $_This[0]
                    })
                );

                _Self_.call( $_This[0] );
            });

            $_This.one(End_Event, iCancel);
        });
    };

/* ---------- Cross Page Event ---------- */

    function CrossPageEvent(iType, iSource) {

        if (typeof iType === 'string') {

            this.type = iType;  this.target = iSource;
        } else
            $.extend(this, iType);

        if (! (iSource && (iSource instanceof Element)))  return;

        $.extend(this,  $.map(iSource.dataset,  function (iValue) {

            if (typeof iValue === 'string')  try {

                return  $.parseJSON( iValue );

            } catch (iError) { }

            return iValue;
        }));
    }

    CrossPageEvent.prototype.valueOf = function () {

        var iValue = $.extend({ }, this);

        delete iValue.data;  delete iValue.target;  delete iValue.valueOf;

        return iValue;
    };

    var $_BOM = $( self );

    $.fn.onReply = function (iType, iData, iCallback) {

        var iTarget = this[0],  $_Source;

        if (typeof iTarget.postMessage != 'function')  return this;

        if (arguments.length === 4) {

            $_Source = $( iData );  iData = iCallback;  iCallback = arguments[3];
        }

        var _Event_ = new CrossPageEvent(iType,  ($_Source || { })[0]);

        if (typeof iCallback === 'function')
            $_BOM.on('message',  function onMessage(iEvent) {

                iEvent = iEvent.originalEvent || iEvent;

                var iReturn = new CrossPageEvent(
                        (typeof iEvent.data === 'string')  ?
                            $.parseJSON( iEvent.data )  :  iEvent.data
                    );
                if (
                    (iEvent.source === iTarget)  &&
                    (iReturn.type === iType)  &&
                    $.isEqual(iReturn, _Event_)
                ) {
                    iCallback.call($_Source ? $_Source[0] : this,  iReturn);

                    $_BOM.off('message', onMessage);
                }
            });

        iData = $.extend({data: iData},  _Event_.valueOf());

        iTarget.postMessage(
            ($.browser.msie < 10)  ?  JSON.stringify( iData )  :  iData,  '*'
        );
    };
})(jquery);


(function ($) {

/* ---------- RESTful API ---------- */

    $.map(['get', 'post', 'put', 'delete'],  function (method) {

        $[ method ] = $[ method ]  ||  function (URL, data, callback, DataType) {

            if (typeof data === 'function')
                DataType = callback,  callback = data,  data = null;

            return $.ajax($.extend(
                {
                    type:           method,
                    url:            URL,
                    crossDomain:    true,
                    data:           data,
                    dataType:       DataType,
                    success:        callback
                },
                $.isPlainObject( URL )  ?  URL  :  { }
            ));
        };
    });

    $.getJSON = $.getJSON || $.get;


/* ---------- Smart Load ---------- */

    $.fn.load = function (iURL, iData, iCallback) {

        if (! this[0])  return this;

        if (typeof iData == 'function')
            iCallback = iData,  iData = null;

        var $_This = this;

        iURL = iURL.trim().split(/\s+/);

        $[iData ? 'post' : 'get'](iURL[0],  iData,  function (iHTML, _, iXHR) {

            $_This.htmlExec(
                (typeof iHTML === 'string')  ?  iHTML  :  iXHR.responseText,
                iURL[1]
            );

            if (typeof iCallback === 'function')
                $_This.each( $.proxy(iCallback, null, iHTML, _, iXHR) );
        },  'html');

        return this;
    };

})(jquery);


(function ($) {

    var W3C_Selection = (typeof document.getSelection === 'function');

    function Select_Node(iSelection) {

        var iFocus = W3C_Selection ?
                iSelection.focusNode : iSelection.createRange().parentElement();

        var iActive = iFocus.ownerDocument.activeElement;

        return  $.contains(iActive, iFocus)  ?  iFocus  :  iActive;
    }

    function Find_Selection() {

        var iDOM = this.document || this.ownerDocument || this;

        if (iDOM.activeElement.tagName.toLowerCase() == 'iframe')  try {

            return  Find_Selection.call( iDOM.activeElement.contentWindow );

        } catch (iError) { }

        var iSelection = W3C_Selection ? iDOM.getSelection() : iDOM.selection;

        var iNode = Select_Node( iSelection );

        return  $.contains(
            (this instanceof Element)  ?  this  :  iDOM,  iNode
        ) && [
            iSelection, iNode
        ];
    }

    $.fn.selection = function (iContent) {

        if (! argument.length) {

            var iSelection = Find_Selection.call( this[0] )[0];

            return  W3C_Selection ?
                (iSelection + '')  :  iSelection.createRange().htmlText;
        }

        return  this.each(function () {

            var iSelection = Find_Selection.call( this );

            var iNode = iSelection[1];    iSelection = iSelection[0];

            iNode = (iNode.nodeType === 1)  ?  iNode  :  iNode.parentNode;

            if (! W3C_Selection) {

                iSelection = iSelection.createRange();

                return  iSelection.text = (
                    (typeof iContent === 'function')  ?
                        iContent.call(iNode, iSelection.text)  :  iContent
                );
            }
            var iProperty, iStart, iEnd;

            if ((iNode.tagName || '').match( /input|textarea/i )) {

                iProperty = 'value';

                iStart = Math.min(iNode.selectionStart, iNode.selectionEnd);

                iEnd = Math.max(iNode.selectionStart, iNode.selectionEnd);
            } else {
                iProperty = 'innerHTML';

                iStart = Math.min(iSelection.anchorOffset, iSelection.focusOffset);

                iEnd = Math.max(iSelection.anchorOffset, iSelection.focusOffset);
            }

            var iValue = iNode[ iProperty ];

            iNode[ iProperty ] = iValue.slice(0, iStart)  +  (
                (typeof iContent === 'function')  ?
                    iContent.call(iNode, iValue.slice(iStart, iEnd))  :  iContent
            )  +  iValue.slice( iEnd );
        });
    };
})(jquery);


(function ($) {

/* ---------- Form Field Validation ---------- */

    function Value_Check() {

        if ((! this.value)  &&  (this.getAttribute('required') != null))
            return false;

        var iRegEx = this.getAttribute('pattern');

        if (iRegEx)  try {

            return  RegExp( iRegEx ).test( this.value );

        } catch (iError) { }

        if (
            (this.tagName.toLowerCase() === 'input')  &&
            (this.getAttribute('type') === 'number')
        ) {
            var iNumber = Number( this.value ),
                iMin = Number( this.getAttribute('min') );
            if (
                isNaN( iNumber )  ||
                (iNumber < iMin)  ||
                (iNumber > Number(this.getAttribute('max') || Infinity))  ||
                ((iNumber - iMin)  %  Number( this.getAttribute('step') ))
            )
                return false;
        }

        return true;
    }

    $.fn.validate = function () {

        var $_Field = this.find(':field').removeClass('invalid');

        for (var i = 0;  $_Field[i];  i++)
            if ((
                (typeof $_Field[i].checkValidity === 'function')  &&
                (! $_Field[i].checkValidity())
            )  ||  (
                ! Value_Check.call( $_Field[i] )
            )) {
                $_Field = $( $_Field[i] ).addClass('invalid');

                $_Field.scrollParents().eq(0).scrollTo( $_Field.focus() );

                return false;
            }

        return true;
    };

/* ---------- Form Element AJAX Submit ---------- */

    function AJAX_Submit(DataType, iCallback) {

        var $_Form = $( this );

        if ((! $_Form.validate())  ||  $_Form.data('_AJAX_Submitting_'))
            return false;

        $_Form.data('_AJAX_Submitting_', 1);

        var iMethod = ($_Form.attr('method') || 'Get').toLowerCase();

        arguments[0].preventDefault();

        var iOption = {
                type:        iMethod,
                dataType:    DataType || 'json'
            };

        if (! $_Form.find('input[type="file"]')[0])
            iOption.data = $_Form.serialize();
        else {
            iOption.data = new self.FormData( $_Form[0] );

            iOption.contentType = iOption.processData = false;
        }

        $.ajax(this.action, iOption).then(function () {

            $_Form.data('_AJAX_Submitting_', 0);

            if (typeof iCallback === 'function')
                iCallback.call($_Form[0], arguments[0]);
        });
    }

    $.fn.ajaxSubmit = function (DataType, iCallback) {

        if (! this[0])  return this;

        if (typeof DataType === 'function')
            iCallback = DataType,  DataType = '';

        iCallback = $.proxy(AJAX_Submit, null, DataType, iCallback);

        var $_This = (this.length < 2)  ?  this  :  this.sameParents().eq(0);

        if ($_This[0].tagName.toLowerCase() === 'form')
            $_This.submit( iCallback );
        else
            $_This.on('submit', 'form', iCallback);

        return this;
    };

})(jquery);


(function ($) {

    var BOM = self;

/* ---------- Bit Operation for Big Number  v0.1 ---------- */

    function Bit_Calculate(iType, iLeft, iRight) {

        iLeft = parseInt(iLeft, 2);    iRight = parseInt(iRight, 2);

        switch (iType) {
            case '&':    return  iLeft & iRight;
            case '|':    return  iLeft | iRight;
            case '^':    return  iLeft ^ iRight;
            case '~':    return  ~iLeft;
        }
    }

    $.bitOperate = function (iType, iLeft, iRight) {

        iLeft = (typeof iLeft === 'string')  ?  iLeft  :  iLeft.toString(2);

        iRight = (typeof iRight === 'string')  ?  iRight  :  iRight.toString(2);

        var iLength = Math.max(iLeft.length, iRight.length);

        if (iLength < 32)
            return  Bit_Calculate(iType, iLeft, iRight).toString(2);

        iLeft = iLeft.padStart(iLength, 0);

        iRight = iRight.padStart(iLength, 0);

        var iResult = '';

        for (var i = 0;  i < iLength;  i += 31)
            iResult += Bit_Calculate(
                iType,  iLeft.slice(i, i + 31),  iRight.slice(i, i + 31)
            ).toString(2).padStart(
                Math.min(31,  iLength - i),  0
            );

        return iResult;
    };

/* ---------- Local Storage Wrapper  v0.1 ---------- */

    var LS_Key = [ ];

    $.storage = function (iName, iData) {

        if (! (iData != null))  return  JSON.parse(BOM.localStorage[ iName ]);

        var iLast = 0,  iLength = Math.min(LS_Key.length, BOM.localStorage.length);

        do  try {
            BOM.localStorage[ iName ] = JSON.stringify( iData );

            if (LS_Key.indexOf( iName )  ==  -1)  LS_Key.push( iName );
            break;
        } catch (iError) {
            if (LS_Key[ iLast ]) {
                delete  BOM.localStorage[ LS_Key[iLast] ];

                LS_Key.splice(iLast, 1);
            } else
                iLast++ ;
        } while (iLast < iLength);

        return iData;
    };

/* ---------- Base64 to Blob  v0.1 ---------- */

//  Thanks "axes" --- http://www.cnblogs.com/axes/p/4603984.html

    $.toBlob = function (iType, iString) {

        if (arguments.length == 1) {

            iString = iType.match(/^data:([^;]+);base64,(.+)/);

            iType = iString[1];    iString = iString[2];
        }

        iString = BOM.atob( iString );

        var iBuffer = new ArrayBuffer( iString.length );

        var uBuffer = new Uint8Array( iBuffer );

        for (var i = 0;  iString[i];  i++)
            uBuffer[i] = iString.charCodeAt(i);

        var BlobBuilder = BOM.WebKitBlobBuilder || BOM.MozBlobBuilder;

        if (! BlobBuilder)
            return  new BOM.Blob([iBuffer],  {type: iType});

        var iBuilder = new BlobBuilder();    iBuilder.append( iBuffer );

        return  iBuilder.getBlob( iType );
    };

/* ---------- CRC-32  v0.1 ---------- */

//  Thanks "Bakasen" for http://blog.csdn.net/bakasen/article/details/6043797

    var CRC_32_Table = (function () {

            var iTable = new Array(256);

            for (var i = 0, iCell;  i < 256;  i++) {
                iCell = i;

                for (var j = 0;  j < 8;  j++)
                    if (iCell & 1)
                        iCell = ((iCell >> 1) & 0x7FFFFFFF)  ^  0xEDB88320;
                    else
                        iCell = (iCell >> 1)  &  0x7FFFFFFF;

                iTable[i] = iCell;
            }

            return iTable;
        })();

    function CRC_32(iRAW) {

        iRAW = '' + iRAW;

        var iValue = 0xFFFFFFFF;

        for (var i = 0;  iRAW[i];  i++)
            iValue = ((iValue >> 8) & 0x00FFFFFF)  ^  CRC_32_Table[
                (iValue & 0xFF)  ^  iRAW.charCodeAt(i)
            ];

        return  iValue ^ 0xFFFFFFFF;
    }

/* ---------- Hash Algorithm (Crypto API Wrapper)  v0.1 ---------- */

//  Thanks "emu" --- http://blog.csdn.net/emu/article/details/39618297

    if ( BOM.msCrypto )
        $.each((BOM.crypto = BOM.msCrypto).subtle,  function (key, _This_) {

            if (! (_This_ instanceof Function))  return;

            BOM.crypto.subtle[ key ] = function () {

                var iObserver = _This_.apply(this, arguments);

                return  new Promise(function (iResolve) {

                    iObserver.oncomplete = function () {

                        iResolve( arguments[0].target.result );
                    };

                    iObserver.onabort = iObserver.onerror = arguments[1];
                });
            };
        });

    if (! BOM.crypto)  return;

    BOM.crypto.subtle = BOM.crypto.subtle || BOM.crypto.webkitSubtle;


    function BufferToString(iBuffer){

        var iDataView = new DataView(iBuffer),  iResult = '';

        for (var i = 0, iTemp;  i < iBuffer.byteLength;  i += 4) {

            iTemp = iDataView.getUint32(i).toString(16);

            iResult += ((iTemp.length == 8) ? '' : 0)  +  iTemp;
        }

        return iResult;
    }

    $.dataHash = function (iAlgorithm, iData) {

        if (arguments.length < 2) {

            iData = iAlgorithm;  iAlgorithm = 'CRC-32';
        }

        return  (iAlgorithm === 'CRC-32')  ?
            Promise.resolve( CRC_32( iData ) )  :
            BOM.crypto.subtle.digest(
                {name:  iAlgorithm},
                new Uint8Array(Array.from(iData,  function () {

                    return arguments[0].charCodeAt(0);
                }))
            ).then( BufferToString );
    };

})(jquery);
});